<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TOUKO BLOG</title>
  <subtitle>Android码农，程序猿，未来的昏析师</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-02-06T08:49:26.262Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>TOUKO</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo + Github搭建个人独立博客</title>
    <link href="http://yoursite.com/2017/02/05/Hexo+Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/02/05/Hexo+Github搭建个人博客/</id>
    <published>2017-02-05T12:30:18.000Z</published>
    <updated>2017-02-06T08:49:26.262Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-Github搭建个人静态博客"><a href="#Hexo-Github搭建个人静态博客" class="headerlink" title="Hexo + Github搭建个人静态博客"></a>Hexo + Github搭建个人静态博客</h1><ul>
<li>hexo出自台湾大学生tommy351之手，是一个基于Node.js的静态博客程序，其编译上百篇文字只需要几秒。hexo生成的静态网页可以直接放到GitHub Pages，BAE，SAE等平台上。</li>
<li>搭建过程你或许觉得有那么点小繁琐，但一旦搭建完成，写文章是极简单，极舒服的。</li>
<li>只需要几个简单命令，你就可以完成一切。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo n #写文章</div><div class="line">hexo g #生成</div><div class="line">hexo d #部署到github # 可与hexo g合并为 hexo d -g</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul>
<li><p><strong>安装Node</strong><br>官网<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a>下载相应平台的最新版本，一路安装即可。<br>可参考<a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="external">Node.js 安装配置</a>  </p>
</li>
<li><p><strong>安装Git</strong><br>下载地址：<a href="http://git-scm.com/download/" target="_blank" rel="external">http://git-scm.com/download/</a><br>下载下来设置一下环境变量即可，Git_HOME，%Git_HOME%\bin之类的。  </p>
</li>
</ul>
<h2 id="GitHub配置"><a href="#GitHub配置" class="headerlink" title="GitHub配置"></a>GitHub配置</h2><p>Github官网：<a href="http://www.github.com/" target="_blank" rel="external">http://www.github.com/</a>    </p>
<ul>
<li><p><strong>创建GitHub仓库</strong><br>注册GitHub账号，创建一个以”用户名.github.io”命名的仓库，如我的用户名为mingdaa,那我的仓库名为：mingdaa.github.io。</p>
</li>
<li><p><strong>配置Git</strong><br>设置Git的用户名和邮件地址（邮箱就是你注册Github时候的邮箱），打开Git Bash,键入：  </p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;username&quot; # username填写Git的用户名</div><div class="line">$ git config --global user.email &quot;email@example.com&quot; # email@example.com填写注册Github的邮箱</div></pre></td></tr></table></figure>
<ul>
<li><strong>本地Git与GitHub建立联系</strong><br>配置SSH，先检查电脑是否已经有SSH  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ls -al ~/.ssh</div></pre></td></tr></table></figure>
<p>如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件。<br>输入以下指令后，一路回车就好：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C &quot;emailt@example.com&quot;</div></pre></td></tr></table></figure>
<p>然后键入以下指令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ssh-agent -s</div><div class="line">$ ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure>
<p>如果出现这个错误:Could not open a connection to your authentication agent，则先执行如下命令即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-agent bash</div></pre></td></tr></table></figure>
<p>再重新输入指令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure>
<p>到了这一步，就可以添加SSH key到你的Github账户了。键入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ clip &lt; ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure>
<p>在github右上角点击头像–&gt;Settings–&gt;SSH and GPG keys–&gt;New SSH key<br>Title自己随便取，然后这个Key就是刚刚拷贝的，你直接粘贴就好（也可以文本打开id_rsa.pub复制其内容），最后Add SSH key。<br>最后测试一下吧，键入命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure>
<p>设置成功应该是会显示成功提示，如下：<br><img src="http://okxlor1n5.bkt.clouddn.com/ssh-T.png" alt="image"></p>
<h2 id="Hexo-配置"><a href="#Hexo-配置" class="headerlink" title="Hexo 配置"></a>Hexo 配置</h2><ul>
<li><strong>初始化hexo文件夹</strong><br>先在本地自定义一个文件夹存放Hexo相关的文件，我例如我在D盘创建了一个文件夹myBlog。<br>github仓库默有master分支，用于托管生成的静态文件，再新建一个develop(名字自定)分支，用于托管后台文件，方便以后换电脑时后台文件不会丢失。<br>到GitHub的用户名.github.io仓库下，复制里面的HTTPS地址。<br>在myBlog目录下，右键Git Bash Here: 键入git clone -b develop &lt;刚复制HTTPS地址&gt;</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cd /d/ </div><div class="line">$ mkdir myBlog</div><div class="line">$ cd myBlog</div><div class="line">$ git clone -b develop https://github.com/mingdaa/mingdaa.github.io.git</div></pre></td></tr></table></figure>
<ul>
<li><strong>安装Hexo</strong><br>在Git Bash继续键入命令：  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ cd mingdaa.github.io</div><div class="line">$ mkdir hexo # 再创建一个hexo文件夹，安装hexo</div><div class="line">$ cd hexo</div><div class="line">$ npm install -g hexo</div><div class="line">$ hexo init</div><div class="line">$ hexo g # 或者hexo generate</div><div class="line">$ hexo s # 或者hexo server，可以在http://localhost:4000/查看</div></pre></td></tr></table></figure>
<p>注意在使用npm安装hexo的时候，如果在Git Bash中出现  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;sh.exe&quot;: npm: command not found</div></pre></td></tr></table></figure>
<p>那么需要右击Git Bash以管理员身份运行，再次在Git Bash中输入npm install -g hexo即可。</p>
<p>装好之后你可以用 hexo -v 命令查看hexo的相关信息，我的hexo如下所示：<br><img src="http://okxlor1n5.bkt.clouddn.com/hexo-v.png" alt="image"></p>
<p>现在已经可以本地预览博客，执行下列命令,然后到浏览器输入localhost:4000查看。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g # 生成</div><div class="line">$ hexo s # 部署到本地，启动服务</div></pre></td></tr></table></figure>
<h2 id="Hexo配置Next主题"><a href="#Hexo配置Next主题" class="headerlink" title="Hexo配置Next主题"></a>Hexo配置Next主题</h2><p>Next主题官网：<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">http://theme-next.iissnan.com/</a><br>其他相关主题配置可浏览Hexo官网上的推荐：<a href="https://hexo.io/themes/" target="_blank" rel="external">https://hexo.io/themes/</a></p>
<ul>
<li><p><strong>复制主题</strong><br>在hexo根目录打开Git Bash，键入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo clean # 清除缓存</div><div class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next # 下载Next主题</div></pre></td></tr></table></figure>
</li>
<li><p><strong>启用主题</strong><br>修改Hexo根目录下的_config.yml配置文件中的theme属性，将其设置为next。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: next</div></pre></td></tr></table></figure>
<p>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 hexo clean 来清除 Hexo 的缓存。  </p>
<ul>
<li><strong>预览配置好的主题</strong><br>执行下列命令,然后到浏览器输入localhost:4000查看效果了。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g #生成</div><div class="line">$ hexo s #部署到本地，启动服务</div></pre></td></tr></table></figure>
<ul>
<li><strong>配置git仓库路径</strong></li>
</ul>
<p>修改Hexo根目录下的_config.yml配置文件，找到并配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: https://git@github.com:mingdaa/mingdaa.github.io.git #仓库路径https地址</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<ul>
<li><strong>完成部署</strong><br>最后一步，部署到github上，键入指令：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div><div class="line">$ hexo generate</div><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>输入弹出框的用户名与密码(首次使用git会弹出)。<br>OK，博客已经完全搭建起来了，在浏览器输入<a href="https://mingdaa.github.io/（你的github配置的地址），就可以愉快的浏览了" target="_blank" rel="external">https://mingdaa.github.io/（你的github配置的地址），就可以愉快的浏览了</a></p>
<p>最后，每次写文章输入一下命令就可以了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo n #写文章</div><div class="line">hexo g #生成</div><div class="line">hexo d #部署到github # 可与hexo g合并为 hexo d -g</div></pre></td></tr></table></figure>
<h2 id="日常操作"><a href="#日常操作" class="headerlink" title="日常操作"></a>日常操作</h2><ul>
<li><strong>写文章</strong><br>执行new命令，生成指定名称的文章至 \hexo\source\_posts\文章标题.md 。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new [layout] &quot;文章标题&quot; # 新建文章</div></pre></td></tr></table></figure>
<p>然后用编辑器打开“文章标题.md”按照Markdown语法书写文章。<br>其中layout是可选参数，默认值为post。到 source 目录下查看现有的layout。当然你可以添加自己的layout，<br>同时你也可以编辑现有的layout。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 文章标题 </div><div class="line">date: 2017-01-19 16:13:10   # 日期时间</div><div class="line">categories: 分类</div><div class="line">tags: 标签 </div><div class="line">---</div></pre></td></tr></table></figure>
<ul>
<li><strong>提交</strong><br>每次在本地对博客进行修改后，先执行下列命令提交网站相关的文件。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git add .</div><div class="line">$ git commit -m &quot;...&quot;</div><div class="line">$ git push origin develop</div></pre></td></tr></table></figure>
<p>然后才执行hexo generate -d发布网站到master分支上</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate -d</div></pre></td></tr></table></figure>
<ul>
<li><strong>本地仓库丢失</strong><br>当你想在其他电脑工作，或电脑重装系统后，安装Git与Node.js后，可以使用下列步骤：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 拷贝仓库到本地</div><div class="line">$ git clone -b develop https://github.com/mingdaa/mingdaa.github.io.git</div><div class="line"></div><div class="line"># 配置Hexo</div><div class="line">$ npm install -g hexo-cli</div><div class="line">$ npm install hexo</div><div class="line">$ npm install</div><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<ul>
<li><strong>Hexo常用的几个命令</strong>  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;postName&quot; # 新建文章</div><div class="line">hexo new page &quot;pageName&quot; # 新建页面</div><div class="line">hexo generate # 生成静态页面至public目录</div><div class="line">hexo server # 开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</div><div class="line">hexo deploy # 将.deploy目录部署到GitHub</div><div class="line">hexo help  # 查看帮助</div><div class="line">hexo version  # 查看Hexo的版本</div><div class="line">hexo deploy -g  # 生成加部署</div><div class="line">hexo server -g  # 生成加预览</div><div class="line"></div><div class="line">#命令的简写</div><div class="line">hexo n == hexo new</div><div class="line">hexo g == hexo generate</div><div class="line">hexo s == hexo server</div><div class="line">hexo d == hexo deploy</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hexo-Github搭建个人静态博客&quot;&gt;&lt;a href=&quot;#Hexo-Github搭建个人静态博客&quot; class=&quot;headerlink&quot; title=&quot;Hexo + Github搭建个人静态博客&quot;&gt;&lt;/a&gt;Hexo + Github搭建个人静态博客&lt;/h1&gt;&lt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>greenDao 3.X 的使用简析</title>
    <link href="http://yoursite.com/2017/01/19/greenDao/"/>
    <id>http://yoursite.com/2017/01/19/greenDao/</id>
    <published>2017-01-19T08:13:10.000Z</published>
    <updated>2017-01-19T08:17:37.091Z</updated>
    
    <content type="html"><![CDATA[<p><strong>greenDao 3.X 的使用简析</strong></p>
<ul>
<li>一个对象关系映射（ORM）的框架，能够提供一个接口通过操作对象的方式去操作关系型数据库，它能够让你操作数据库时更简单、更方便。</li>
<li>greenDAO github地址：<a href="https://github.com/greenrobot/greenDAO" target="_blank" rel="external">https://github.com/greenrobot/greenDAO</a></li>
</ul>
<p><strong>GreenDao 优点：</strong></p>
<ul>
<li>性能高，号称Android最快的关系型数据库</li>
<li>内存占用小</li>
<li>库文件比较小，小于100K</li>
<li>支持数据库加密 greendao支持SQLCipher进行数据库加密</li>
<li>简洁易用的API</li>
</ul>
<p><strong>GreenDao 3.2使用方式</strong></p>
<ul>
<li>第一步：在项目的Build.gradle(project)中添加如下配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &apos;org.greenrobot:greendao-gradle-plugin:3.2.1&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>第二步：在模块中的Build.gradle(app)中添加如下配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;org.greenrobot.greendao&apos;</div><div class="line"></div><div class="line">android&#123;</div><div class="line">    ……</div><div class="line">    greendao&#123;</div><div class="line">        // 数据库版本号</div><div class="line">        schemaVersion 1</div><div class="line">        // 设置DaoMaster，DaoSession，Dao包名</div><div class="line">        daoPackage &apos;xxx.xxx.xxx.gen&apos;</div><div class="line">        // 设置DaoMaster，DaoSession，Dao目录</div><div class="line">        targetGenDir &apos;src/main/java&apos;</div><div class="line">        //设置生成单元测试目录</div><div class="line">        // targetGenDirTest</div><div class="line">        //设置自动生成单元测试用例</div><div class="line">        // generateTests</div><div class="line">    &#125;</div><div class="line">    ……</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile &apos;org.greenrobot:greendao:3.2.0&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>第四步：写实体类</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">// 实体注解</div><div class="line">@Entity(</div><div class="line">    // 如果你有超过一个的数据库结构，可以通过这个字段来区分该实体属于哪个结构</div><div class="line">    schema = &quot;myschema&quot;,</div><div class="line"></div><div class="line">    //  实体活动状体标志位(默认为false) 若设置为true，实体有更新、删除和刷新方法</div><div class="line">    active = true,</div><div class="line"></div><div class="line">    // 在数据库中表的名称，默认为实体的类名 </div><div class="line">    nameInDb = &quot;NOTE&quot;,</div><div class="line"></div><div class="line">    //  定义索引，可以跨越多个列(默认为实体类成员变量的个数) </div><div class="line">    indexes = &#123;</div><div class="line">            @Index(value = &quot;name DESC&quot;, unique = true)</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    // DAO是否应该创建数据库表的标志(默认为true)</div><div class="line">    // 如果你有多对一的表，将这个字段设置为false</div><div class="line">    // 或者你已经在GreenDAO之外创建了表，也将其置为false</div><div class="line">    createInDb = false</div><div class="line">)</div><div class="line">public class Note &#123;</div><div class="line">    @Id //选定一个long/Long类型的字段作为实体的ID，即数据库中的主键。</div><div class="line">    private Long id;</div><div class="line">    @NotNull</div><div class="line">    private long createTime;</div><div class="line">    private String content;</div><div class="line">    private String title;</div><div class="line">    private int weatherPosition;</div><div class="line">    private String localtion;</div><div class="line"></div><div class="line">    @Generated   //hash值会自动生成(hash = 346208569) </div><div class="line">    public Note(Long id, long createTime, String content, String title,</div><div class="line">            int weatherPosition, String localtion) &#123;</div><div class="line">        this.id = id;</div><div class="line">        this.createTime = createTime;</div><div class="line">        this.content = content;</div><div class="line">        this.title = title;</div><div class="line">        this.weatherPosition = weatherPosition;</div><div class="line">        this.localtion = localtion;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Generated</div><div class="line">    public Note() &#123;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //make project后变成会自动生成get/set方法</div></pre></td></tr></table></figure>
<blockquote>
<p>说明：<br><strong>实体注解</strong><br>@Entity 实体注解<br><strong>基础属性注解</strong><br>@Id 选定一个long/Long类型的字段作为实体的ID，即数据库中的主键。<br>@Generated  GreenDao运行所产生的构造函数或者方法，被此标注的代码可以变更或者下次运行时清除<br>@Keep 注解的代码段在GreenDao下次运行时保持不变，注解实体类：默认禁止修改此类，注解其他代码段，默认禁止修改注解的代码段。<br>@Property 让你自定义字段在数据库中的名称，如果为空，GreenDAO将根据驼峰法将其用”_”分割，并全部转为大写，如userName 变为 USER_NAME。<br>@NotNull 使字段在数据库中成为非空字段，通常都会将基本类型加上NonNull标志。<br>@Transient 使得字段不再持久化。<br><strong>索引注解</strong><br>@Index：使用@Index作为一个属性来创建一个索引，通过name设置索引别名，也可以通过unique给索引添加约束<br>@Unique：向数据库列添加了一个唯一的约束<br><strong>关系注解</strong><br>@ToOne：定义与另一个实体（一个实体对象）的关系<br>@ToMany：定义与多个实体对象的关系   </p>
</blockquote>
<ul>
<li>第五步：封装GreenDao调用方法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">public class GreenDaoManager &#123;</div><div class="line"></div><div class="line">    private static GreenDaoManager mInstance; //单例</div><div class="line">    private DaoMaster mDaoMaster; //以一定的模式管理Dao类的数据库对象</div><div class="line">    private DaoSession mDaoSession; //管理制定模式下的所有可用Dao对象</div><div class="line">    public GreenDaoManager() &#123;</div><div class="line">        if (mInstance == null) &#123;</div><div class="line">            DaoMaster.DevOpenHelper devOpenHelper = new</div><div class="line">                    DaoMaster.DevOpenHelper(App.getContext(), &quot;myDay-note&quot;, null);</div><div class="line">            mDaoMaster = new DaoMaster(devOpenHelper.getWritableDatabase());</div><div class="line">            mDaoSession = mDaoMaster.newSession();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    public static GreenDaoManager getInstance() &#123;</div><div class="line">        if (mInstance == null) &#123;</div><div class="line">            synchronized (GreenDaoManager.class) &#123;</div><div class="line">                if (mInstance == null) &#123;</div><div class="line">                    mInstance = new GreenDaoManager();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return mInstance;</div><div class="line">    &#125;</div><div class="line">    public DaoMaster getMaster() &#123;</div><div class="line">        return mDaoMaster;</div><div class="line">    &#125;</div><div class="line">    public DaoSession getSession() &#123;</div><div class="line">        return mDaoSession;</div><div class="line">    &#125;</div><div class="line">    public DaoSession getNewSession() &#123;</div><div class="line">        mDaoSession = mDaoMaster.newSession();</div><div class="line">        return mDaoSession;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>第六步：执行增删改查</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 获取dao实例对象</div><div class="line">NoteDao noteDao = GreenDaoManager.getInstance().getSession().getNoteDao();</div><div class="line">//执行增删改查操作</div><div class="line">// 增</div><div class="line">Note note = new Note(null, creatTime, noteContent, noteTitle, weatherPosition,location);</div><div class="line">noteDao.insert(note);</div><div class="line">// 删</div><div class="line">noteDao.deleteByKey(noteId);</div><div class="line">// 改</div><div class="line">noteDao.update(note);</div><div class="line">// 查</div><div class="line">QueryBuilder&lt;Note&gt; queryBuilder = noteDao.queryBuilder().where(NoteDao.Properties.Id.eq(noteId));</div><div class="line">Note note = queryBuilder.unique();</div></pre></td></tr></table></figure>
<p>以上即为GreenDao的基本使用方法</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;greenDao 3.X 的使用简析&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个对象关系映射（ORM）的框架，能够提供一个接口通过操作对象的方式去操作关系型数据库，它能够让你操作数据库时更简单、更方便。&lt;/li&gt;
&lt;li&gt;greenDAO github
    
    </summary>
    
    
      <category term="greenDao" scheme="http://yoursite.com/tags/greenDao/"/>
    
  </entry>
  
  <entry>
    <title>markdown简明语法</title>
    <link href="http://yoursite.com/2017/01/18/markdown/"/>
    <id>http://yoursite.com/2017/01/18/markdown/</id>
    <published>2017-01-18T02:50:03.000Z</published>
    <updated>2017-01-19T10:49:29.785Z</updated>
    
    <content type="html"><![CDATA[<h1 id="markdown简明语法"><a href="#markdown简明语法" class="headerlink" title="markdown简明语法"></a>markdown简明语法</h1><p>Markdown是一种极简的『标记语言』，将文本转为HTML，通常为我大码农所用。其不追求大而全，简洁至上，正所谓不求最贵，只求最好！</p>
<p>本文介绍Markdown基本语法，内容很少，一行语法一行示例，学会后可轻松写出高大上的文档，再也不需要各种编辑器去调文章格式。另外，网上有各平台下的Markdown工具可用，也有在线的，我直接使用sublime搞定，Markdown本来就是为了追求简洁，弄个工具岂不多此一举。  </p>
<h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p>星号与下划线都可以，单是斜体，双是粗体，符号可跨行，符号可加空格<br>格式：  </p>
<pre>  
**一个人来到田纳西**  
__毫无疑问__  
*我做的馅饼  
是全天下*  
_最好吃的_ 
</pre>

<p>显示效果：<br><strong>一个人来到田纳西</strong><br><strong>毫无疑问</strong><br><em>我做的馅饼<br>是全天下</em><br><em>最好吃的</em></p>
<hr>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>三个或更多-_*，必须单独一行，可含空格<br>格式：  </p>
<pre>  
&#175;&#175;&#175;
</pre>

<p>显示效果：  </p>
<hr>
<h2 id="空格-换行"><a href="#空格-换行" class="headerlink" title="空格,换行"></a>空格,换行</h2><p>半方大的空格&amp;ensp;或&amp;#8194 ;<br>全方大的空格&amp;emsp ;或&amp;#8195 ;<br>不断行的空格&amp;nbsp ;或&amp;#160 ;<br>2个空格，&amp;emsp;<br>换行，连续按2个以上空格，然后回车</p>
<hr>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>格式：  </p>
<pre>
> 引用 
</pre>

<p>显示效果：  </p>
<blockquote>
<p>引用 </p>
</blockquote>
<p>内层符号前的空格必须要<br>格式：  </p>
<pre> 
>引用  
&emsp;>>引用中的引用 
</pre>


<p>显示效果：   </p>
<blockquote>
<p>引用</p>
<blockquote>
<p>引用中的引用  </p>
</blockquote>
</blockquote>
<hr>
<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>格式：  </p>
<pre> 
# 一级标题  
## 二级标题  
### 三级标题  
#### 四级标题  
##### 五级标题  
###### 六级标题   
</pre>

<hr>
<h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>符号之后的空格不能少，-+*效果一样，但不能混合使用，因混合是嵌套列表，内容可超长<br>格式：   </p>
<pre>
- 无序列表  
+ 无序列表  
* 无序列表  
- 无序列表：我很长。我也很长！那比一比啊？比就比！我有这么长，你有我长吗？我有这么这么长！好吧，你赢了！ 
</pre>

<p>显示效果：   </p>
<ul>
<li>无序列表</li>
</ul>
<ul>
<li>无序列表</li>
</ul>
<ul>
<li>无序列表</li>
</ul>
<ul>
<li>无序列表：我很长。我也很长！那比一比啊？比就比！我有这么长，你有我长吗？我有这么这么长！好吧，你赢了！  </li>
</ul>
<hr>
<h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>数字不能省略但可无序，点号之后的空格不能少  </p>
<ol>
<li>有序列表</li>
<li>有序列表</li>
<li>有序列表</li>
<li>有序列表 </li>
</ol>
<hr>
<h2 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h2><p>-+*可循环使用，但符号之后的空格不能少，符号之前的空格也不能少<br>格式：    </p>
<pre>
- 嵌套列表  
&emsp;+ 嵌套列表  
&emsp;+ 嵌套列表  
&emsp;&emsp;- 嵌套列表  
&emsp;&emsp;&emsp;* 嵌套列表  
- 嵌套列表  
</pre>

<p>显示效果：   </p>
<ul>
<li>嵌套列表<ul>
<li>嵌套列表</li>
<li>嵌套列表<ul>
<li>嵌套列表<ul>
<li>嵌套列表</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>嵌套列表  </li>
</ul>
<hr>
<h2 id="文字超链：Inline方式"><a href="#文字超链：Inline方式" class="headerlink" title="文字超链：Inline方式"></a>文字超链：Inline方式</h2><p>格式：  </p>
<pre>  
[博客](https://mingdaa.github.io/)  
</pre>

<p>显示效果：<br><a href="https://mingdaa.github.io/" title="mingdaa的博客" target="_blank" rel="external">博客</a></p>
<h2 id="图片超链"><a href="#图片超链" class="headerlink" title="图片超链"></a>图片超链</h2><p>格式：  </p>
<pre>
![image](http://图片地址)
</pre>

<p>显示效果：<br><img src="https://avatars0.githubusercontent.com/u/19933368?v=3&amp;u=28da34f8cb1f2fea2eecfba93ed15a5909abaf02&amp;s=400" alt="image">  </p>
<hr>
<h2 id="索引超链：Reference方式"><a href="#索引超链：Reference方式" class="headerlink" title="索引超链：Reference方式"></a>索引超链：Reference方式</h2><p>索引，1 2可以是任意字符<br>格式：  </p>
<pre>
[我的博客][1]  
![图片][2]  

[1]:https://mingdaa.github.io/  
[2]:https://图片地址 
</pre>


<p>显示效果：<br><a href="https://mingdaa.github.io/" target="_blank" rel="external">我的博客</a><br><img src="https://avatars0.githubusercontent.com/u/19933368?v=3&amp;u=28da34f8cb1f2fea2eecfba93ed15a5909abaf02&amp;s=400" alt="图片"></p>
<hr>
<h2 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h2><p>尖括号<br>格式：  </p>
<pre>
&lt;https://mingdaa.github.io&gt;   
</pre>

<p>显示效果：<br><a href="https://mingdaa.github.io/" target="_blank" rel="external">https://mingdaa.github.io/</a></p>
<hr>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>格式：</p>
<pre>
&#39;&#39;&#39; 
class    
{  
&emsp;&emsp;public static void main(String[] args)   
&emsp;&emsp;{  
&emsp;&emsp;&emsp;&emsp;System.out.println("Hello World!");  
&emsp;&emsp;}  
}  
&#39;&#39;&#39;  
</pre>

<p>显示效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class  </div><div class="line">&#123;</div><div class="line">	public static void main(String[] args) </div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;Hello World!&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>可以使用html的注释，不会在HTML中显示<br>格式：  </p>
<pre>
&lt;!-- 注释 --&gt;
</pre>

<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>Markdown中的转义字符为\，需要转义的有：<br>\ 反斜杠<br>` 反引号<br>* 星号<br>_ 下划线<br>{} 大括号<br>[] 中括号<br>() 小括号<br># 井号<br>+ 加号<br>- 减号<br>. 英文句号<br>! 感叹号  </p>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>格式：  </p>
<pre> 
表头1 | 表头2 <br>
---|---  <br>
左上 | 右上  <br>
左下 | 右下   <br>
</pre>

<p>显示效果：</p>
<table>
<thead>
<tr>
<th>表头1</th>
<th>表头2</th>
</tr>
</thead>
<tbody>
<tr>
<td>左上</td>
<td>右上  </td>
</tr>
<tr>
<td>左下</td>
<td>右下</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="HTML-中有用的字符实体"><a href="#HTML-中有用的字符实体" class="headerlink" title="HTML 中有用的字符实体"></a>HTML 中有用的字符实体</h2><table>
<thead>
<tr>
<th>显示结果</th>
<th>描述</th>
<th>实体名称</th>
<th>实体编号</th>
</tr>
</thead>
<tbody>
<tr>
<td>&nbsp;</td>
<td>空格</td>
<td>&amp;nbsp;</td>
<td>&amp;#160;</td>
</tr>
<tr>
<td>&#60;</td>
<td>小于号</td>
<td>&amp;lt;</td>
<td>&amp;#60;  </td>
</tr>
<tr>
<td>&gt;</td>
<td>大于号</td>
<td>&amp;gt;</td>
<td>&amp;#62;   </td>
</tr>
<tr>
<td>&amp;</td>
<td>和号</td>
<td>&amp;amp;</td>
<td>&amp;#38;   </td>
</tr>
<tr>
<td>&quot;</td>
<td>引号</td>
<td>&amp;quot;</td>
<td>&amp;#34;   </td>
</tr>
<tr>
<td>‘</td>
<td>撇号&nbsp;</td>
<td>&amp;apos; (IE不支持)</td>
<td>&amp;#39;</td>
</tr>
<tr>
<td>￠</td>
<td>分（cent）</td>
<td>&amp;cent;</td>
<td>&amp;#162;    </td>
</tr>
<tr>
<td>&pound;</td>
<td>镑（pound）</td>
<td>&amp;pound;</td>
<td>&amp;#163;  </td>
</tr>
<tr>
<td>&yen;</td>
<td>元（yen）</td>
<td>&amp;yen;</td>
<td>&amp;#165;    </td>
</tr>
<tr>
<td>&euro;</td>
<td>欧元（euro）</td>
<td>&amp;euro;</td>
<td>&amp;#8364;</td>
</tr>
<tr>
<td>§</td>
<td>小节</td>
<td>&amp;sect;</td>
<td>&amp;#167;</td>
</tr>
<tr>
<td>&copy;</td>
<td>版权（copyright）</td>
<td>&amp;copy;</td>
<td>&amp;#169;</td>
</tr>
<tr>
<td>&#174;</td>
<td>注册商标</td>
<td>&amp;reg;</td>
<td>&amp;#174;</td>
</tr>
<tr>
<td>&trade;</td>
<td>商标</td>
<td>&amp;trade;</td>
<td>&amp;#8482;</td>
</tr>
<tr>
<td>×</td>
<td>乘号</td>
<td>&amp;times;</td>
<td>&amp;#215;</td>
</tr>
<tr>
<td>÷</td>
<td>除号</td>
<td>&amp;divide;</td>
<td>&amp;#247;</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>文本中可直接用html标签，但是要前后加上空行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;markdown简明语法&quot;&gt;&lt;a href=&quot;#markdown简明语法&quot; class=&quot;headerlink&quot; title=&quot;markdown简明语法&quot;&gt;&lt;/a&gt;markdown简明语法&lt;/h1&gt;&lt;p&gt;Markdown是一种极简的『标记语言』，将文本转为HTML
    
    </summary>
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
</feed>
