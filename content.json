[{"title":"Hexo + Github搭建个人独立博客","date":"2017-02-05T12:30:18.000Z","path":"2017/02/05/Hexo+Github搭建个人博客/","text":"Hexo + Github搭建个人静态博客 hexo出自台湾大学生tommy351之手，是一个基于Node.js的静态博客程序，其编译上百篇文字只需要几秒。hexo生成的静态网页可以直接放到GitHub Pages，BAE，SAE等平台上。 搭建过程你或许觉得有那么点小繁琐，但一旦搭建完成，写文章是极简单，极舒服的。 只需要几个简单命令，你就可以完成一切。123hexo n #写文章hexo g #生成hexo d #部署到github # 可与hexo g合并为 hexo d -g 环境准备 安装Node官网Node.js下载相应平台的最新版本，一路安装即可。可参考Node.js 安装配置 安装Git下载地址：http://git-scm.com/download/下载下来设置一下环境变量即可，Git_HOME，%Git_HOME%\\bin之类的。 GitHub配置Github官网：http://www.github.com/ 创建GitHub仓库注册GitHub账号，创建一个以”用户名.github.io”命名的仓库，如我的用户名为mingdaa,那我的仓库名为：mingdaa.github.io。 配置Git设置Git的用户名和邮件地址（邮箱就是你注册Github时候的邮箱），打开Git Bash,键入： 12$ git config --global user.name &quot;username&quot; # username填写Git的用户名$ git config --global user.email &quot;email@example.com&quot; # email@example.com填写注册Github的邮箱 本地Git与GitHub建立联系配置SSH，先检查电脑是否已经有SSH 1$ ls -al ~/.ssh 如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件。输入以下指令后，一路回车就好： 1$ ssh-keygen -t rsa -C &quot;emailt@example.com&quot; 然后键入以下指令： 12$ ssh-agent -s$ ssh-add ~/.ssh/id_rsa 如果出现这个错误:Could not open a connection to your authentication agent，则先执行如下命令即可： 1$ ssh-agent bash 再重新输入指令： 1$ ssh-add ~/.ssh/id_rsa 到了这一步，就可以添加SSH key到你的Github账户了。键入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴）： 1$ clip &lt; ~/.ssh/id_rsa.pub 在github右上角点击头像–&gt;Settings–&gt;SSH and GPG keys–&gt;New SSH keyTitle自己随便取，然后这个Key就是刚刚拷贝的，你直接粘贴就好（也可以文本打开id_rsa.pub复制其内容），最后Add SSH key。最后测试一下吧，键入命令： 1$ ssh -T git@github.com 设置成功应该是会显示成功提示，如下： Hexo 配置 初始化hexo文件夹先在本地自定义一个文件夹存放Hexo相关的文件，我例如我在D盘创建了一个文件夹myBlog。github仓库默有master分支，用于托管生成的静态文件，再新建一个develop(名字自定)分支，用于托管后台文件，方便以后换电脑时后台文件不会丢失。到GitHub的用户名.github.io仓库下，复制里面的HTTPS地址。在myBlog目录下，右键Git Bash Here: 键入git clone -b develop &lt;刚复制HTTPS地址&gt; 1234$ cd /d/ $ mkdir myBlog$ cd myBlog$ git clone -b develop https://github.com/mingdaa/mingdaa.github.io.git 安装Hexo在Git Bash继续键入命令： 1234567$ cd mingdaa.github.io$ mkdir hexo # 再创建一个hexo文件夹，安装hexo$ cd hexo$ npm install -g hexo$ hexo init$ hexo g # 或者hexo generate$ hexo s # 或者hexo server，可以在http://localhost:4000/查看 注意在使用npm安装hexo的时候，如果在Git Bash中出现 1&quot;sh.exe&quot;: npm: command not found 那么需要右击Git Bash以管理员身份运行，再次在Git Bash中输入npm install -g hexo即可。 装好之后你可以用 hexo -v 命令查看hexo的相关信息，我的hexo如下所示： 现在已经可以本地预览博客，执行下列命令,然后到浏览器输入localhost:4000查看。 12$ hexo g # 生成$ hexo s # 部署到本地，启动服务 Hexo配置Next主题Next主题官网：http://theme-next.iissnan.com/其他相关主题配置可浏览Hexo官网上的推荐：https://hexo.io/themes/ 复制主题在hexo根目录打开Git Bash，键入： 12$ hexo clean # 清除缓存$ git clone https://github.com/iissnan/hexo-theme-next themes/next # 下载Next主题 启用主题修改Hexo根目录下的_config.yml配置文件中的theme属性，将其设置为next。 1theme: next 到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 hexo clean 来清除 Hexo 的缓存。 预览配置好的主题执行下列命令,然后到浏览器输入localhost:4000查看效果了。 12$ hexo g #生成$ hexo s #部署到本地，启动服务 配置git仓库路径 修改Hexo根目录下的_config.yml配置文件，找到并配置： 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:mingdaa/mingdaa.github.io.git #仓库路径https地址 branch: master 完成部署最后一步，部署到github上，键入指令： 123$ npm install hexo-deployer-git --save$ hexo generate$ hexo deploy 输入弹出框的用户名与密码(首次使用git会弹出)。OK，博客已经完全搭建起来了，在浏览器输入https://mingdaa.github.io/（你的github配置的地址），就可以愉快的浏览了 最后，每次写文章输入一下命令就可以了： 123hexo n #写文章hexo g #生成hexo d #部署到github # 可与hexo g合并为 hexo d -g 日常操作 写文章执行new命令，生成指定名称的文章至 \\hexo\\source\\_posts\\文章标题.md 。 1$ hexo new [layout] &quot;文章标题&quot; # 新建文章 然后用编辑器打开“文章标题.md”按照Markdown语法书写文章。其中layout是可选参数，默认值为post。到 source 目录下查看现有的layout。当然你可以添加自己的layout，同时你也可以编辑现有的layout。 123456---title: 文章标题 date: 2017-01-19 16:13:10 # 日期时间categories: 分类tags: 标签 --- 提交每次在本地对博客进行修改后，先执行下列命令提交网站相关的文件。 123$ git add .$ git commit -m &quot;...&quot;$ git push origin develop 然后才执行hexo generate -d发布网站到master分支上 1$ hexo generate -d 本地仓库丢失当你想在其他电脑工作，或电脑重装系统后，安装Git与Node.js后，可以使用下列步骤： 12345678# 拷贝仓库到本地$ git clone -b develop https://github.com/mingdaa/mingdaa.github.io.git# 配置Hexo$ npm install -g hexo-cli$ npm install hexo$ npm install$ npm install hexo-deployer-git --save Hexo常用的几个命令 123456789101112131415hexo new &quot;postName&quot; # 新建文章hexo new page &quot;pageName&quot; # 新建页面hexo generate # 生成静态页面至public目录hexo server # 开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）hexo deploy # 将.deploy目录部署到GitHubhexo help # 查看帮助hexo version # 查看Hexo的版本hexo deploy -g # 生成加部署hexo server -g # 生成加预览#命令的简写hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]},{"title":"greenDao 3.X 的使用简析","date":"2017-01-19T08:13:10.000Z","path":"2017/01/19/greenDao/","text":"greenDao 3.X 的使用简析 一个对象关系映射（ORM）的框架，能够提供一个接口通过操作对象的方式去操作关系型数据库，它能够让你操作数据库时更简单、更方便。 greenDAO github地址：https://github.com/greenrobot/greenDAO GreenDao 优点： 性能高，号称Android最快的关系型数据库 内存占用小 库文件比较小，小于100K 支持数据库加密 greendao支持SQLCipher进行数据库加密 简洁易用的API GreenDao 3.2使用方式 第一步：在项目的Build.gradle(project)中添加如下配置 12345678buildscript &#123; repositories &#123; mavenCentral() &#125; dependencies &#123; classpath &apos;org.greenrobot:greendao-gradle-plugin:3.2.1&apos; &#125;&#125; 第二步：在模块中的Build.gradle(app)中添加如下配置 12345678910111213141516171819202122apply plugin: &apos;org.greenrobot.greendao&apos;android&#123; …… greendao&#123; // 数据库版本号 schemaVersion 1 // 设置DaoMaster，DaoSession，Dao包名 daoPackage &apos;xxx.xxx.xxx.gen&apos; // 设置DaoMaster，DaoSession，Dao目录 targetGenDir &apos;src/main/java&apos; //设置生成单元测试目录 // targetGenDirTest //设置自动生成单元测试用例 // generateTests &#125; ……&#125;dependencies &#123; compile &apos;org.greenrobot:greendao:3.2.0&apos;&#125; 第四步：写实体类 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647// 实体注解@Entity( // 如果你有超过一个的数据库结构，可以通过这个字段来区分该实体属于哪个结构 schema = &quot;myschema&quot;, // 实体活动状体标志位(默认为false) 若设置为true，实体有更新、删除和刷新方法 active = true, // 在数据库中表的名称，默认为实体的类名 nameInDb = &quot;NOTE&quot;, // 定义索引，可以跨越多个列(默认为实体类成员变量的个数) indexes = &#123; @Index(value = &quot;name DESC&quot;, unique = true) &#125;, // DAO是否应该创建数据库表的标志(默认为true) // 如果你有多对一的表，将这个字段设置为false // 或者你已经在GreenDAO之外创建了表，也将其置为false createInDb = false)public class Note &#123; @Id //选定一个long/Long类型的字段作为实体的ID，即数据库中的主键。 private Long id; @NotNull private long createTime; private String content; private String title; private int weatherPosition; private String localtion; @Generated //hash值会自动生成(hash = 346208569) public Note(Long id, long createTime, String content, String title, int weatherPosition, String localtion) &#123; this.id = id; this.createTime = createTime; this.content = content; this.title = title; this.weatherPosition = weatherPosition; this.localtion = localtion; &#125; @Generated public Note() &#123; &#125; //make project后变成会自动生成get/set方法 说明：实体注解@Entity 实体注解基础属性注解@Id 选定一个long/Long类型的字段作为实体的ID，即数据库中的主键。@Generated GreenDao运行所产生的构造函数或者方法，被此标注的代码可以变更或者下次运行时清除@Keep 注解的代码段在GreenDao下次运行时保持不变，注解实体类：默认禁止修改此类，注解其他代码段，默认禁止修改注解的代码段。@Property 让你自定义字段在数据库中的名称，如果为空，GreenDAO将根据驼峰法将其用”_”分割，并全部转为大写，如userName 变为 USER_NAME。@NotNull 使字段在数据库中成为非空字段，通常都会将基本类型加上NonNull标志。@Transient 使得字段不再持久化。索引注解@Index：使用@Index作为一个属性来创建一个索引，通过name设置索引别名，也可以通过unique给索引添加约束@Unique：向数据库列添加了一个唯一的约束关系注解@ToOne：定义与另一个实体（一个实体对象）的关系@ToMany：定义与多个实体对象的关系 第五步：封装GreenDao调用方法 12345678910111213141516171819202122232425262728293031323334public class GreenDaoManager &#123; private static GreenDaoManager mInstance; //单例 private DaoMaster mDaoMaster; //以一定的模式管理Dao类的数据库对象 private DaoSession mDaoSession; //管理制定模式下的所有可用Dao对象 public GreenDaoManager() &#123; if (mInstance == null) &#123; DaoMaster.DevOpenHelper devOpenHelper = new DaoMaster.DevOpenHelper(App.getContext(), &quot;myDay-note&quot;, null); mDaoMaster = new DaoMaster(devOpenHelper.getWritableDatabase()); mDaoSession = mDaoMaster.newSession(); &#125; &#125; public static GreenDaoManager getInstance() &#123; if (mInstance == null) &#123; synchronized (GreenDaoManager.class) &#123; if (mInstance == null) &#123; mInstance = new GreenDaoManager(); &#125; &#125; &#125; return mInstance; &#125; public DaoMaster getMaster() &#123; return mDaoMaster; &#125; public DaoSession getSession() &#123; return mDaoSession; &#125; public DaoSession getNewSession() &#123; mDaoSession = mDaoMaster.newSession(); return mDaoSession; &#125;&#125; 第六步：执行增删改查 12345678910111213// 获取dao实例对象NoteDao noteDao = GreenDaoManager.getInstance().getSession().getNoteDao();//执行增删改查操作// 增Note note = new Note(null, creatTime, noteContent, noteTitle, weatherPosition,location);noteDao.insert(note);// 删noteDao.deleteByKey(noteId);// 改noteDao.update(note);// 查QueryBuilder&lt;Note&gt; queryBuilder = noteDao.queryBuilder().where(NoteDao.Properties.Id.eq(noteId));Note note = queryBuilder.unique(); 以上即为GreenDao的基本使用方法","tags":[{"name":"greenDao","slug":"greenDao","permalink":"http://yoursite.com/tags/greenDao/"}]},{"title":"markdown简明语法","date":"2017-01-18T02:50:03.000Z","path":"2017/01/18/markdown/","text":"markdown简明语法Markdown是一种极简的『标记语言』，将文本转为HTML，通常为我大码农所用。其不追求大而全，简洁至上，正所谓不求最贵，只求最好！ 本文介绍Markdown基本语法，内容很少，一行语法一行示例，学会后可轻松写出高大上的文档，再也不需要各种编辑器去调文章格式。另外，网上有各平台下的Markdown工具可用，也有在线的，我直接使用sublime搞定，Markdown本来就是为了追求简洁，弄个工具岂不多此一举。 强调星号与下划线都可以，单是斜体，双是粗体，符号可跨行，符号可加空格格式： **一个人来到田纳西** __毫无疑问__ *我做的馅饼 是全天下* _最好吃的_ 显示效果：一个人来到田纳西毫无疑问我做的馅饼是全天下最好吃的 分割线三个或更多-_*，必须单独一行，可含空格格式： &#175;&#175;&#175; 显示效果： 空格,换行半方大的空格&amp;ensp;或&amp;#8194 ;全方大的空格&amp;emsp ;或&amp;#8195 ;不断行的空格&amp;nbsp ;或&amp;#160 ;2个空格，&amp;emsp;换行，连续按2个以上空格，然后回车 引用格式： > 引用 显示效果： 引用 内层符号前的空格必须要格式： >引用 &emsp;>>引用中的引用 显示效果： 引用 引用中的引用 标题格式： # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 无序列表符号之后的空格不能少，-+*效果一样，但不能混合使用，因混合是嵌套列表，内容可超长格式： - 无序列表 + 无序列表 * 无序列表 - 无序列表：我很长。我也很长！那比一比啊？比就比！我有这么长，你有我长吗？我有这么这么长！好吧，你赢了！ 显示效果： 无序列表 无序列表 无序列表 无序列表：我很长。我也很长！那比一比啊？比就比！我有这么长，你有我长吗？我有这么这么长！好吧，你赢了！ 有序列表数字不能省略但可无序，点号之后的空格不能少 有序列表 有序列表 有序列表 有序列表 嵌套列表-+*可循环使用，但符号之后的空格不能少，符号之前的空格也不能少格式： - 嵌套列表 &emsp;+ 嵌套列表 &emsp;+ 嵌套列表 &emsp;&emsp;- 嵌套列表 &emsp;&emsp;&emsp;* 嵌套列表 - 嵌套列表 显示效果： 嵌套列表 嵌套列表 嵌套列表 嵌套列表 嵌套列表 嵌套列表 文字超链：Inline方式格式： [博客](https://mingdaa.github.io/) 显示效果：博客 图片超链格式： ![image](http://图片地址) 显示效果： 索引超链：Reference方式索引，1 2可以是任意字符格式： [我的博客][1] ![图片][2] [1]:https://mingdaa.github.io/ [2]:https://图片地址 显示效果：我的博客 自动链接尖括号格式： &lt;https://mingdaa.github.io&gt; 显示效果：https://mingdaa.github.io/ 代码格式： &#39;&#39;&#39; class { &emsp;&emsp;public static void main(String[] args) &emsp;&emsp;{ &emsp;&emsp;&emsp;&emsp;System.out.println(\"Hello World!\"); &emsp;&emsp;} } &#39;&#39;&#39; 显示效果：1234567class &#123; public static void main(String[] args) &#123; System.out.println(&quot;Hello World!&quot;); &#125;&#125; 注释可以使用html的注释，不会在HTML中显示格式： &lt;!-- 注释 --&gt; 转义字符Markdown中的转义字符为\\，需要转义的有：\\ 反斜杠` 反引号* 星号_ 下划线{} 大括号[] 中括号() 小括号# 井号+ 加号- 减号. 英文句号! 感叹号 表格格式： 表头1 | 表头2 ---|--- 左上 | 右上 左下 | 右下 显示效果： 表头1 表头2 左上 右上 左下 右下 HTML 中有用的字符实体 显示结果 描述 实体名称 实体编号 &nbsp; 空格 &amp;nbsp; &amp;#160; &#60; 小于号 &amp;lt; &amp;#60; &gt; 大于号 &amp;gt; &amp;#62; &amp; 和号 &amp;amp; &amp;#38; &quot; 引号 &amp;quot; &amp;#34; ‘ 撇号&nbsp; &amp;apos; (IE不支持) &amp;#39; ￠ 分（cent） &amp;cent; &amp;#162; &pound; 镑（pound） &amp;pound; &amp;#163; &yen; 元（yen） &amp;yen; &amp;#165; &euro; 欧元（euro） &amp;euro; &amp;#8364; § 小节 &amp;sect; &amp;#167; &copy; 版权（copyright） &amp;copy; &amp;#169; &#174; 注册商标 &amp;reg; &amp;#174; &trade; 商标 &amp;trade; &amp;#8482; × 乘号 &amp;times; &amp;#215; ÷ 除号 &amp;divide; &amp;#247; 其它文本中可直接用html标签，但是要前后加上空行。","tags":[{"name":"markdown","slug":"markdown","permalink":"http://yoursite.com/tags/markdown/"}]}]