{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"themes/BlueLake/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","path":"iconfont/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","path":"iconfont/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","path":"iconfont/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/js/search.json.js","path":"js/search.json.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","path":"iconfont/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/img/bg.jpg","path":"img/bg.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/favicon.ico","hash":"4f63be16224b44bf289918b91ed373b824740a7a","modified":1484991840317},{"_id":"themes/BlueLake/LICENSE","hash":"4c3927c82d0aa4fac5cdf945e07afe5e24335891","modified":1484884018465},{"_id":"themes/BlueLake/README.md","hash":"ac07c493e97e8f55f935951f5cebbdd48ddbe384","modified":1484884018466},{"_id":"themes/BlueLake/README.en.md","hash":"91dfcd35c590974428dfab829a5263ebb77f29cc","modified":1484884018465},{"_id":"themes/BlueLake/package.json","hash":"85bcd5e6174018729c071b745208c61efbe802df","modified":1484884018479},{"_id":"themes/BlueLake/_config.yml","hash":"bdd13fb94c44e4abbf622dbca12bd31cd9109217","modified":1484993377273},{"_id":"source/_posts/Hexo+Github搭建个人博客.md","hash":"53d59d0e9c7668b17c6aa46b391ec69ffe744673","modified":1486369673021},{"_id":"source/_posts/markdown.md","hash":"21db804c0493fbe6dd1959a4d9840ee3049e5282","modified":1484822969785},{"_id":"source/_posts/greenDao.md","hash":"d0aeffc713ee77b99bc81d189248cb884df3d7b3","modified":1484813857091},{"_id":"source/about/index.md","hash":"ccdb36c7b4ca24dcdc10322c79192223c0a16bb8","modified":1484990869202},{"_id":"themes/BlueLake/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1484884018450},{"_id":"themes/BlueLake/.git/config","hash":"7e25608fae05296ec4af5a16d8ecf5042faf30a3","modified":1484884018456},{"_id":"themes/BlueLake/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1484884011864},{"_id":"themes/BlueLake/.git/packed-refs","hash":"2be783ed7dceae6f9f6b4662ab50444b217f4b04","modified":1484884018445},{"_id":"themes/BlueLake/languages/de-DE.yml","hash":"cab904a1bbf8d0a189f4132f383224ee8abcc2d5","modified":1484884018468},{"_id":"themes/BlueLake/languages/en.yml","hash":"17913588a78da9e0786ff81359fb74bb8f318f13","modified":1484884018468},{"_id":"themes/BlueLake/languages/es-ES.yml","hash":"0f0f120fe5abfd6e0431bbf6757947247c96c341","modified":1484884018468},{"_id":"themes/BlueLake/languages/fr-FR.yml","hash":"1439db20fb4f4490fab3daea52698479d3fe3f4c","modified":1484884018469},{"_id":"themes/BlueLake/languages/ko.yml","hash":"9e90f546b374cb00e0566f2703642a4129f68029","modified":1484884018469},{"_id":"themes/BlueLake/languages/zh-CN.yml","hash":"4f69ffded977be0153a8cbd84fb2a95f4da572db","modified":1484884018469},{"_id":"themes/BlueLake/languages/zh-TW.yml","hash":"7b97b232cb15cd476cdbf6efe7e904add553ce16","modified":1484884018470},{"_id":"themes/BlueLake/.git/index","hash":"0b6b363d93dd8bbe0472573809fa82dc269ae9aa","modified":1484884018485},{"_id":"themes/BlueLake/layout/archive.jade","hash":"bf6256702a4a30f19fb3a49dd4e1af1d3445cf71","modified":1484884018476},{"_id":"themes/BlueLake/layout/base.jade","hash":"8ea0d09d4e533d24d3284a021513b6fa31e4df88","modified":1484884018477},{"_id":"themes/BlueLake/layout/category.jade","hash":"d1beec4b0741cd8a2cd058939fd50238a6a6068e","modified":1484884018477},{"_id":"themes/BlueLake/layout/page.jade","hash":"bb37bec706bea590def0fc18db954e7c7f2d52d2","modified":1484991068183},{"_id":"themes/BlueLake/layout/index.jade","hash":"3fe1f0c5021ac696ed9846ecb1c75d285fa46708","modified":1484884018477},{"_id":"themes/BlueLake/layout/tag.jade","hash":"7e8fe70f3d4c6e03658c8b88bd93b6bf1f06e258","modified":1484884018478},{"_id":"themes/BlueLake/layout/post.jade","hash":"e110aca2b498d229886217198b36cae0bfe1fcae","modified":1484884018478},{"_id":"themes/BlueLake/source/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1484884018479},{"_id":"themes/BlueLake/source/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1484884018481},{"_id":"themes/BlueLake/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1484884011870},{"_id":"themes/BlueLake/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1484884011865},{"_id":"themes/BlueLake/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1484884011866},{"_id":"themes/BlueLake/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1484884011866},{"_id":"themes/BlueLake/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1484884011865},{"_id":"themes/BlueLake/.git/hooks/pre-push.sample","hash":"b4ad74c989616b7395dc6c9fce9871bb1e86dfb5","modified":1484884011867},{"_id":"themes/BlueLake/.git/logs/HEAD","hash":"5b6e418e2f15632c376124eedb02545122d7a6ac","modified":1484884018453},{"_id":"themes/BlueLake/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1484884011868},{"_id":"themes/BlueLake/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1484884011868},{"_id":"themes/BlueLake/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1484884011867},{"_id":"themes/BlueLake/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1484884011869},{"_id":"themes/BlueLake/layout/_partial/comments.jade","hash":"d1b124aaaef36a90b49086d90741510cd583b566","modified":1484884018471},{"_id":"themes/BlueLake/layout/_partial/after_footer.jade","hash":"370519c70e95e00c89197986827f0f8281f8d7df","modified":1484884018470},{"_id":"themes/BlueLake/layout/_partial/mathjax.jade","hash":"ac6e3a92bf18ab6bbd0e041b6796b295bae963ee","modified":1484884018472},{"_id":"themes/BlueLake/layout/_partial/mathjax2.jade","hash":"234a792e64ba208fa97d2f99772ece23056a53ec","modified":1484884018472},{"_id":"themes/BlueLake/layout/_partial/paginator.jade","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1484884018472},{"_id":"themes/BlueLake/layout/_partial/post_nav.jade","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1484884018473},{"_id":"themes/BlueLake/layout/_partial/totop.jade","hash":"c632919f04194dcf6e0e8ccc572554a859aa922b","modified":1484884018473},{"_id":"themes/BlueLake/layout/_partial/footer.jade","hash":"99c92f051b66b4d63dfc90e55b1fdb943a620c46","modified":1484884018471},{"_id":"themes/BlueLake/layout/_partial/helpers.jade","hash":"9e44f6d32f2449b4109c33118f8285fa2fc7b023","modified":1484884018471},{"_id":"themes/BlueLake/layout/_widget/archive.jade","hash":"9beba53cedfe0fd9bd5c0ba0707784bfc6cc3017","modified":1484884018474},{"_id":"themes/BlueLake/layout/_widget/category.jade","hash":"f76015c742a8a4353dd374863947e83c48c6bd16","modified":1484884018474},{"_id":"themes/BlueLake/layout/_widget/links.jade","hash":"5e2c1d5b4d3323b7b0d5bfeb9a62e6d580b42c10","modified":1484884018475},{"_id":"themes/BlueLake/layout/_partial/tag.jade","hash":"6145b483b271bba05ad1db7c039fe352a768215b","modified":1484884018473},{"_id":"themes/BlueLake/layout/_widget/recent_posts.jade","hash":"c6f778d5d2f13bacbd83a56a9e9faaeac0dda0ed","modified":1484884018475},{"_id":"themes/BlueLake/layout/_widget/tag.jade","hash":"c75308c2b72456cfb98cb80f280c66e58f171705","modified":1484884018476},{"_id":"themes/BlueLake/layout/_widget/weibo.jade","hash":"4e90378aa88c5694126dc8ea5bed3bb2f8642e53","modified":1484884018476},{"_id":"themes/BlueLake/layout/_widget/recent_comments.jade","hash":"c12994a9076e9f428d960b14689a9c15fe15d93c","modified":1484884018475},{"_id":"themes/BlueLake/layout/_widget/search.jade","hash":"fa4ce51b7caa955aa3a0386bf819bf7edf022425","modified":1484884018476},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","hash":"274e5d9126bd6bc195cfd0d6a62b0482cf61d698","modified":1484884018481},{"_id":"themes/BlueLake/source/css/highlight.styl","hash":"92b5c306f276f8ea6a134e303b1b63612d25ecfe","modified":1484884018480},{"_id":"themes/BlueLake/source/css/style.styl","hash":"1f38607902f7832681a89a5058378d2cafa44cdb","modified":1484884018480},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","hash":"ed7141f7374cdb3f05a28fe818b7aa6b47baac37","modified":1484884018482},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","hash":"abc2a26a153298a497b6eba314d93f0835cc4185","modified":1484884018482},{"_id":"themes/BlueLake/source/js/totop.js","hash":"4827a35694b99eadb6dfee5281d2488a33614077","modified":1484884018485},{"_id":"themes/BlueLake/source/js/search.json.js","hash":"7ce826f7b678ff3c524fce8bbd480c188e50c7ee","modified":1484884018485},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","hash":"77a78dbe06adc208cb0d3497f1ea2b9b66f44226","modified":1484884018483},{"_id":"themes/BlueLake/source/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1484884018484},{"_id":"themes/BlueLake/.git/objects/pack/pack-545634b5103a338509d9d27f2c4a820c52ff52d6.idx","hash":"67c0d3d5980e9125e25df7ead60a26e4119de617","modified":1484884018350},{"_id":"themes/BlueLake/.git/refs/heads/master","hash":"aa06063a1ce2fce28b082408722032b875a5b296","modified":1484884018452},{"_id":"themes/BlueLake/.git/logs/refs/heads/master","hash":"5b6e418e2f15632c376124eedb02545122d7a6ac","modified":1484884018453},{"_id":"themes/BlueLake/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1484884018447},{"_id":"themes/BlueLake/.git/objects/pack/pack-545634b5103a338509d9d27f2c4a820c52ff52d6.pack","hash":"d344312b2748aefd345846e81504c75b78d98eb4","modified":1484884018364},{"_id":"themes/BlueLake/.git/logs/refs/remotes/origin/HEAD","hash":"5b6e418e2f15632c376124eedb02545122d7a6ac","modified":1484884018450},{"_id":"public/atom.xml","hash":"65bd8168fd9209055d806b1760f6980150232858","modified":1486370163148},{"_id":"public/baidusitemap.xml","hash":"7dbfbcf1d33ca324dd3c9b80728c28df5e262d05","modified":1486370163149},{"_id":"public/sitemap.xml","hash":"0e83e7fca53220f620ab0ffdfe902af37b055f5e","modified":1486370163149},{"_id":"public/content.json","hash":"97593f080b58ad89c2c021042a39188863233669","modified":1486370163149},{"_id":"public/about/index.html","hash":"21c2288576ffb5d96a3ce3d85b54186ac713d20f","modified":1486370163176},{"_id":"public/2017/01/18/markdown/index.html","hash":"834debc155624cc433a83552b0b5e725bf94e156","modified":1486370163176},{"_id":"public/archives/index.html","hash":"7c3b96f3ee73ccbd02f5187e0d96dfdc6529ba7f","modified":1486370163176},{"_id":"public/archives/2017/index.html","hash":"7c3b96f3ee73ccbd02f5187e0d96dfdc6529ba7f","modified":1486370163176},{"_id":"public/archives/2017/01/index.html","hash":"4b7157783da603f53a3ae8cfb064a8e5e5d2fda0","modified":1486370163176},{"_id":"public/index.html","hash":"bfc1f14b00955028e34c34f06d2208c7f1292bf1","modified":1486370163176},{"_id":"public/tags/markdown/index.html","hash":"5662c87ff14f8b3a759f9f220ba60aae8b9bed5a","modified":1486370163176},{"_id":"public/2017/01/19/greenDao/index.html","hash":"fb5191da1dc4cfc197e9511d51ebb3aeeb563eb9","modified":1486370163177},{"_id":"public/archives/2017/02/index.html","hash":"f79f2781a6da9a0094c0a23bd7cce98d957ea0d5","modified":1486370163178},{"_id":"public/tags/Hexo/index.html","hash":"6e3be6996072af77baf634d20bf22d6612dec8db","modified":1486370163178},{"_id":"public/tags/greenDao/index.html","hash":"a1e79364292be5dc961a822710c3fd22c606e223","modified":1486370163178},{"_id":"public/2017/02/05/Hexo+Github搭建个人博客/index.html","hash":"8e6d8812abc245498c73d66649bf1768c2812b5d","modified":1486370163178},{"_id":"public/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1486370163180},{"_id":"public/iconfont/iconfont.eot","hash":"274e5d9126bd6bc195cfd0d6a62b0482cf61d698","modified":1486370163180},{"_id":"public/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1486370163180},{"_id":"public/iconfont/iconfont.ttf","hash":"abc2a26a153298a497b6eba314d93f0835cc4185","modified":1486370163180},{"_id":"public/iconfont/iconfont.svg","hash":"ed7141f7374cdb3f05a28fe818b7aa6b47baac37","modified":1486370163180},{"_id":"public/iconfont/iconfont.woff","hash":"77a78dbe06adc208cb0d3497f1ea2b9b66f44226","modified":1486370163180},{"_id":"public/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1486370163662},{"_id":"public/css/highlight.css","hash":"932879716cbce6f9a1b830070ed514082398f1ca","modified":1486370163667},{"_id":"public/js/totop.js","hash":"68401c96fd1b459328eb11dd624af7b887bf925c","modified":1486370163667},{"_id":"public/js/search.json.js","hash":"a0e8dfee9b9845aabd64360d497df7c0767b7235","modified":1486370163667},{"_id":"public/css/style.css","hash":"ce1b78ba2c8c503d3cf631480bdd85a565d59442","modified":1486370163667}],"Category":[],"Data":[],"Page":[{"title":"About Me","date":"2017-01-21T09:25:05.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: About Me\ndate: 2017-01-21 17:25:05\n---\n","updated":"2017-01-21T09:27:49.202Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciytuf1k40001kodd40t0okpl","content":"","excerpt":"","more":""}],"Post":[{"title":"Hexo + Github搭建个人独立博客","date":"2017-02-05T12:30:18.000Z","_content":"\n# Hexo + Github搭建个人静态博客\n\n- hexo出自台湾大学生tommy351之手，是一个基于Node.js的静态博客程序，其编译上百篇文字只需要几秒。hexo生成的静态网页可以直接放到GitHub Pages，BAE，SAE等平台上。\n- 搭建过程你或许觉得有那么点小繁琐，但一旦搭建完成，写文章是极简单，极舒服的。\n- 只需要几个简单命令，你就可以完成一切。\n```\nhexo n #写文章\nhexo g #生成\nhexo d #部署到github # 可与hexo g合并为 hexo d -g\n```\n\n---\n\n## 环境准备\n- **安装Node**  \n官网[Node.js](https://nodejs.org/en/)下载相应平台的最新版本，一路安装即可。    \n可参考[Node.js 安装配置](http://www.runoob.com/nodejs/nodejs-install-setup.html)  \n  \n- **安装Git**  \n下载地址：http://git-scm.com/download/  \n下载下来设置一下环境变量即可，Git_HOME，%Git_HOME%\\bin之类的。  \n\n\n## GitHub配置\nGithub官网：http://www.github.com/    \n- **创建GitHub仓库**  \n注册GitHub账号，创建一个以”用户名.github.io”命名的仓库，如我的用户名为mingdaa,那我的仓库名为：mingdaa.github.io。\n\n- **配置Git**  \n设置Git的用户名和邮件地址（邮箱就是你注册Github时候的邮箱），打开Git Bash,键入：  \n\n```\n$ git config --global user.name \"username\" # username填写Git的用户名\n$ git config --global user.email \"email@example.com\" # email@example.com填写注册Github的邮箱\n```\n\n- **本地Git与GitHub建立联系**  \n配置SSH，先检查电脑是否已经有SSH  \n\n```\n$ ls -al ~/.ssh\n```\n如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件。  \n输入以下指令后，一路回车就好：\n\n```\n$ ssh-keygen -t rsa -C \"emailt@example.com\" \n```\n然后键入以下指令：\n\n```\n$ ssh-agent -s\n$ ssh-add ~/.ssh/id_rsa\n```\n\n如果出现这个错误:Could not open a connection to your authentication agent，则先执行如下命令即可：\n\n```\n$ ssh-agent bash\n```\n再重新输入指令：\n\n```\n$ ssh-add ~/.ssh/id_rsa\n```\n到了这一步，就可以添加SSH key到你的Github账户了。键入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴）：\n\n```\n$ clip < ~/.ssh/id_rsa.pub\n```\n在github右上角点击头像–>Settings–>SSH and GPG keys–>New SSH key\nTitle自己随便取，然后这个Key就是刚刚拷贝的，你直接粘贴就好（也可以文本打开id_rsa.pub复制其内容），最后Add SSH key。  \n最后测试一下吧，键入命令：\n\n```\n$ ssh -T git@github.com\n```\n设置成功应该是会显示成功提示，如下：  \n![image](http://okxlor1n5.bkt.clouddn.com/ssh-T.png)\n\n\n## Hexo 配置\n- **初始化hexo文件夹**  \n先在本地自定义一个文件夹存放Hexo相关的文件，我例如我在D盘创建了一个文件夹myBlog。  \ngithub仓库默有master分支，用于托管生成的静态文件，再新建一个develop(名字自定)分支，用于托管后台文件，方便以后换电脑时后台文件不会丢失。  \n到GitHub的用户名.github.io仓库下，复制里面的HTTPS地址。\n在myBlog目录下，右键Git Bash Here: 键入git clone -b develop <刚复制HTTPS地址>\n\n```\n$ cd /d/ \n$ mkdir myBlog\n$ cd myBlog\n$ git clone -b develop https://github.com/mingdaa/mingdaa.github.io.git\n\n```\n\n- **安装Hexo**  \n在Git Bash继续键入命令：  \n\n```\n$ mkdir hexo # 再创建一个hexo文件夹，安装hexo\n$ cd hexo\n$ npm install -g hexo\n$ hexo init\n$ hexo g # 或者hexo generate\n$ hexo s # 或者hexo server，可以在http://localhost:4000/查看\n\n```\n注意在使用npm安装hexo的时候，如果在Git Bash中出现  \n\n```\n\"sh.exe\": npm: command not found\n```\n\n那么需要右击Git Bash以管理员身份运行，再次在Git Bash中输入npm install -g hexo即可。\n\n装好之后你可以用 hexo -v 命令查看hexo的相关信息，我的hexo如下所示：\n![image](http://okxlor1n5.bkt.clouddn.com/hexo-v.png)\n\n现在已经可以本地预览博客，执行下列命令,然后到浏览器输入localhost:4000查看。\n\n```\n$ hexo g # 生成\n$ hexo s # 部署到本地，启动服务\n```\n\n\n## Hexo配置Next主题\nNext主题官网：http://theme-next.iissnan.com/  \n其他相关主题配置可浏览Hexo官网上的推荐：https://hexo.io/themes/\n- **复制主题**  \n在hexo根目录打开Git Bash，键入：\n```\n$ hexo clean # 清除缓存\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next # 下载Next主题\n\n```\n- **启用主题**  \n修改Hexo根目录下的_config.yml配置文件中的theme属性，将其设置为next。\n\n```\ntheme: next\n```\n到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 hexo clean 来清除 Hexo 的缓存。  \n\n- **预览配置好的主题**  \n执行下列命令,然后到浏览器输入localhost:4000查看效果了。\n\n```\n$ hexo g #生成\n$ hexo s #部署到本地，启动服务\n```\n\n- **配置git仓库路径**\n\n修改Hexo根目录下的_config.yml配置文件，找到并配置：\n\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: https://git@github.com:mingdaa/mingdaa.github.io.git #仓库路径https地址\n  branch: master\n```\n- **完成部署**\n最后一步，部署到github上，键入指令：\n\n```\n$ npm install hexo-deployer-git --save\n$ hexo generate\n$ hexo deploy\n```\n\n输入弹出框的用户名与密码(首次使用git会弹出)。  \nOK，博客已经完全搭建起来了，在浏览器输入https://mingdaa.github.io/（你的github配置的地址），就可以愉快的浏览了\n\n最后，每次写文章输入一下命令就可以了：\n\n```\nhexo n #写文章\nhexo g #生成\nhexo d #部署到github # 可与hexo g合并为 hexo d -g\n```\n\n## 日常操作\n- **写文章**\n执行new命令，生成指定名称的文章至 \\hexo\\source\\\\_posts\\文章标题.md 。\n\n```\n$ hexo new [layout] \"文章标题\" # 新建文章\n```\n\n然后用编辑器打开“文章标题.md”按照Markdown语法书写文章。  \n其中layout是可选参数，默认值为post。到 source 目录下查看现有的layout。当然你可以添加自己的layout，\n同时你也可以编辑现有的layout。\n\n```\n---\ntitle: 文章标题 \ndate: 2017-01-19 16:13:10   # 日期时间\ncategories: 分类\ntags: 标签 \n---\n```\n\n- **提交**  \n每次在本地对博客进行修改后，先执行下列命令提交网站相关的文件。\n\n```\n$ git add .\n$ git commit -m \"...\"\n$ git push origin develop\n```\n\n然后才执行hexo generate -d发布网站到master分支上\n\n```\n$ hexo generate -d\n```\n\n- **本地仓库丢失**  \n当你想在其他电脑工作，或电脑重装系统后，安装Git与Node.js后，可以使用下列步骤：\n\n```\n# 拷贝仓库到本地\n$ git clone -b develop https://github.com/mingdaa/mingdaa.github.io.git\n\n# 配置Hexo\n$ npm install -g hexo-cli\n$ npm install hexo\n$ npm install\n$ npm install hexo-deployer-git --save\n\n```\n\n\n- **Hexo常用的几个命令**  \n\n```\nhexo new \"postName\" # 新建文章\nhexo new page \"pageName\" # 新建页面\nhexo generate # 生成静态页面至public目录\nhexo server # 开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy # 将.deploy目录部署到GitHub\nhexo help  # 查看帮助\nhexo version  # 查看Hexo的版本\nhexo deploy -g  # 生成加部署\nhexo server -g  # 生成加预览\n\n#命令的简写\nhexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n```","source":"_posts/Hexo+Github搭建个人博客.md","raw":"---\ntitle: Hexo + Github搭建个人独立博客  \ndate: 2017-02-05 20:30:18   \ntags: Hexo  \n---\n\n# Hexo + Github搭建个人静态博客\n\n- hexo出自台湾大学生tommy351之手，是一个基于Node.js的静态博客程序，其编译上百篇文字只需要几秒。hexo生成的静态网页可以直接放到GitHub Pages，BAE，SAE等平台上。\n- 搭建过程你或许觉得有那么点小繁琐，但一旦搭建完成，写文章是极简单，极舒服的。\n- 只需要几个简单命令，你就可以完成一切。\n```\nhexo n #写文章\nhexo g #生成\nhexo d #部署到github # 可与hexo g合并为 hexo d -g\n```\n\n---\n\n## 环境准备\n- **安装Node**  \n官网[Node.js](https://nodejs.org/en/)下载相应平台的最新版本，一路安装即可。    \n可参考[Node.js 安装配置](http://www.runoob.com/nodejs/nodejs-install-setup.html)  \n  \n- **安装Git**  \n下载地址：http://git-scm.com/download/  \n下载下来设置一下环境变量即可，Git_HOME，%Git_HOME%\\bin之类的。  \n\n\n## GitHub配置\nGithub官网：http://www.github.com/    \n- **创建GitHub仓库**  \n注册GitHub账号，创建一个以”用户名.github.io”命名的仓库，如我的用户名为mingdaa,那我的仓库名为：mingdaa.github.io。\n\n- **配置Git**  \n设置Git的用户名和邮件地址（邮箱就是你注册Github时候的邮箱），打开Git Bash,键入：  \n\n```\n$ git config --global user.name \"username\" # username填写Git的用户名\n$ git config --global user.email \"email@example.com\" # email@example.com填写注册Github的邮箱\n```\n\n- **本地Git与GitHub建立联系**  \n配置SSH，先检查电脑是否已经有SSH  \n\n```\n$ ls -al ~/.ssh\n```\n如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件。  \n输入以下指令后，一路回车就好：\n\n```\n$ ssh-keygen -t rsa -C \"emailt@example.com\" \n```\n然后键入以下指令：\n\n```\n$ ssh-agent -s\n$ ssh-add ~/.ssh/id_rsa\n```\n\n如果出现这个错误:Could not open a connection to your authentication agent，则先执行如下命令即可：\n\n```\n$ ssh-agent bash\n```\n再重新输入指令：\n\n```\n$ ssh-add ~/.ssh/id_rsa\n```\n到了这一步，就可以添加SSH key到你的Github账户了。键入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴）：\n\n```\n$ clip < ~/.ssh/id_rsa.pub\n```\n在github右上角点击头像–>Settings–>SSH and GPG keys–>New SSH key\nTitle自己随便取，然后这个Key就是刚刚拷贝的，你直接粘贴就好（也可以文本打开id_rsa.pub复制其内容），最后Add SSH key。  \n最后测试一下吧，键入命令：\n\n```\n$ ssh -T git@github.com\n```\n设置成功应该是会显示成功提示，如下：  \n![image](http://okxlor1n5.bkt.clouddn.com/ssh-T.png)\n\n\n## Hexo 配置\n- **初始化hexo文件夹**  \n先在本地自定义一个文件夹存放Hexo相关的文件，我例如我在D盘创建了一个文件夹myBlog。  \ngithub仓库默有master分支，用于托管生成的静态文件，再新建一个develop(名字自定)分支，用于托管后台文件，方便以后换电脑时后台文件不会丢失。  \n到GitHub的用户名.github.io仓库下，复制里面的HTTPS地址。\n在myBlog目录下，右键Git Bash Here: 键入git clone -b develop <刚复制HTTPS地址>\n\n```\n$ cd /d/ \n$ mkdir myBlog\n$ cd myBlog\n$ git clone -b develop https://github.com/mingdaa/mingdaa.github.io.git\n\n```\n\n- **安装Hexo**  \n在Git Bash继续键入命令：  \n\n```\n$ mkdir hexo # 再创建一个hexo文件夹，安装hexo\n$ cd hexo\n$ npm install -g hexo\n$ hexo init\n$ hexo g # 或者hexo generate\n$ hexo s # 或者hexo server，可以在http://localhost:4000/查看\n\n```\n注意在使用npm安装hexo的时候，如果在Git Bash中出现  \n\n```\n\"sh.exe\": npm: command not found\n```\n\n那么需要右击Git Bash以管理员身份运行，再次在Git Bash中输入npm install -g hexo即可。\n\n装好之后你可以用 hexo -v 命令查看hexo的相关信息，我的hexo如下所示：\n![image](http://okxlor1n5.bkt.clouddn.com/hexo-v.png)\n\n现在已经可以本地预览博客，执行下列命令,然后到浏览器输入localhost:4000查看。\n\n```\n$ hexo g # 生成\n$ hexo s # 部署到本地，启动服务\n```\n\n\n## Hexo配置Next主题\nNext主题官网：http://theme-next.iissnan.com/  \n其他相关主题配置可浏览Hexo官网上的推荐：https://hexo.io/themes/\n- **复制主题**  \n在hexo根目录打开Git Bash，键入：\n```\n$ hexo clean # 清除缓存\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next # 下载Next主题\n\n```\n- **启用主题**  \n修改Hexo根目录下的_config.yml配置文件中的theme属性，将其设置为next。\n\n```\ntheme: next\n```\n到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 hexo clean 来清除 Hexo 的缓存。  \n\n- **预览配置好的主题**  \n执行下列命令,然后到浏览器输入localhost:4000查看效果了。\n\n```\n$ hexo g #生成\n$ hexo s #部署到本地，启动服务\n```\n\n- **配置git仓库路径**\n\n修改Hexo根目录下的_config.yml配置文件，找到并配置：\n\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: https://git@github.com:mingdaa/mingdaa.github.io.git #仓库路径https地址\n  branch: master\n```\n- **完成部署**\n最后一步，部署到github上，键入指令：\n\n```\n$ npm install hexo-deployer-git --save\n$ hexo generate\n$ hexo deploy\n```\n\n输入弹出框的用户名与密码(首次使用git会弹出)。  \nOK，博客已经完全搭建起来了，在浏览器输入https://mingdaa.github.io/（你的github配置的地址），就可以愉快的浏览了\n\n最后，每次写文章输入一下命令就可以了：\n\n```\nhexo n #写文章\nhexo g #生成\nhexo d #部署到github # 可与hexo g合并为 hexo d -g\n```\n\n## 日常操作\n- **写文章**\n执行new命令，生成指定名称的文章至 \\hexo\\source\\\\_posts\\文章标题.md 。\n\n```\n$ hexo new [layout] \"文章标题\" # 新建文章\n```\n\n然后用编辑器打开“文章标题.md”按照Markdown语法书写文章。  \n其中layout是可选参数，默认值为post。到 source 目录下查看现有的layout。当然你可以添加自己的layout，\n同时你也可以编辑现有的layout。\n\n```\n---\ntitle: 文章标题 \ndate: 2017-01-19 16:13:10   # 日期时间\ncategories: 分类\ntags: 标签 \n---\n```\n\n- **提交**  \n每次在本地对博客进行修改后，先执行下列命令提交网站相关的文件。\n\n```\n$ git add .\n$ git commit -m \"...\"\n$ git push origin develop\n```\n\n然后才执行hexo generate -d发布网站到master分支上\n\n```\n$ hexo generate -d\n```\n\n- **本地仓库丢失**  \n当你想在其他电脑工作，或电脑重装系统后，安装Git与Node.js后，可以使用下列步骤：\n\n```\n# 拷贝仓库到本地\n$ git clone -b develop https://github.com/mingdaa/mingdaa.github.io.git\n\n# 配置Hexo\n$ npm install -g hexo-cli\n$ npm install hexo\n$ npm install\n$ npm install hexo-deployer-git --save\n\n```\n\n\n- **Hexo常用的几个命令**  \n\n```\nhexo new \"postName\" # 新建文章\nhexo new page \"pageName\" # 新建页面\nhexo generate # 生成静态页面至public目录\nhexo server # 开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy # 将.deploy目录部署到GitHub\nhexo help  # 查看帮助\nhexo version  # 查看Hexo的版本\nhexo deploy -g  # 生成加部署\nhexo server -g  # 生成加预览\n\n#命令的简写\nhexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n```","slug":"Hexo+Github搭建个人博客","published":1,"updated":"2017-02-06T08:27:53.021Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciytuf1k10000koddsyvoai6a","content":"<h1 id=\"Hexo-Github搭建个人静态博客\"><a href=\"#Hexo-Github搭建个人静态博客\" class=\"headerlink\" title=\"Hexo + Github搭建个人静态博客\"></a>Hexo + Github搭建个人静态博客</h1><ul>\n<li>hexo出自台湾大学生tommy351之手，是一个基于Node.js的静态博客程序，其编译上百篇文字只需要几秒。hexo生成的静态网页可以直接放到GitHub Pages，BAE，SAE等平台上。</li>\n<li>搭建过程你或许觉得有那么点小繁琐，但一旦搭建完成，写文章是极简单，极舒服的。</li>\n<li>只需要几个简单命令，你就可以完成一切。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo n #写文章</div><div class=\"line\">hexo g #生成</div><div class=\"line\">hexo d #部署到github # 可与hexo g合并为 hexo d -g</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><ul>\n<li><p><strong>安装Node</strong><br>官网<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">Node.js</a>下载相应平台的最新版本，一路安装即可。<br>可参考<a href=\"http://www.runoob.com/nodejs/nodejs-install-setup.html\" target=\"_blank\" rel=\"external\">Node.js 安装配置</a>  </p>\n</li>\n<li><p><strong>安装Git</strong><br>下载地址：<a href=\"http://git-scm.com/download/\" target=\"_blank\" rel=\"external\">http://git-scm.com/download/</a><br>下载下来设置一下环境变量即可，Git_HOME，%Git_HOME%\\bin之类的。  </p>\n</li>\n</ul>\n<h2 id=\"GitHub配置\"><a href=\"#GitHub配置\" class=\"headerlink\" title=\"GitHub配置\"></a>GitHub配置</h2><p>Github官网：<a href=\"http://www.github.com/\" target=\"_blank\" rel=\"external\">http://www.github.com/</a>    </p>\n<ul>\n<li><p><strong>创建GitHub仓库</strong><br>注册GitHub账号，创建一个以”用户名.github.io”命名的仓库，如我的用户名为mingdaa,那我的仓库名为：mingdaa.github.io。</p>\n</li>\n<li><p><strong>配置Git</strong><br>设置Git的用户名和邮件地址（邮箱就是你注册Github时候的邮箱），打开Git Bash,键入：  </p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name &quot;username&quot; # username填写Git的用户名</div><div class=\"line\">$ git config --global user.email &quot;email@example.com&quot; # email@example.com填写注册Github的邮箱</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>本地Git与GitHub建立联系</strong><br>配置SSH，先检查电脑是否已经有SSH  </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ls -al ~/.ssh</div></pre></td></tr></table></figure>\n<p>如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件。<br>输入以下指令后，一路回车就好：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen -t rsa -C &quot;emailt@example.com&quot;</div></pre></td></tr></table></figure>\n<p>然后键入以下指令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-agent -s</div><div class=\"line\">$ ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure>\n<p>如果出现这个错误:Could not open a connection to your authentication agent，则先执行如下命令即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-agent bash</div></pre></td></tr></table></figure>\n<p>再重新输入指令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure>\n<p>到了这一步，就可以添加SSH key到你的Github账户了。键入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ clip &lt; ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure>\n<p>在github右上角点击头像–&gt;Settings–&gt;SSH and GPG keys–&gt;New SSH key<br>Title自己随便取，然后这个Key就是刚刚拷贝的，你直接粘贴就好（也可以文本打开id_rsa.pub复制其内容），最后Add SSH key。<br>最后测试一下吧，键入命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh -T git@github.com</div></pre></td></tr></table></figure>\n<p>设置成功应该是会显示成功提示，如下：<br><img src=\"http://okxlor1n5.bkt.clouddn.com/ssh-T.png\" alt=\"image\"></p>\n<h2 id=\"Hexo-配置\"><a href=\"#Hexo-配置\" class=\"headerlink\" title=\"Hexo 配置\"></a>Hexo 配置</h2><ul>\n<li><strong>初始化hexo文件夹</strong><br>先在本地自定义一个文件夹存放Hexo相关的文件，我例如我在D盘创建了一个文件夹myBlog。<br>github仓库默有master分支，用于托管生成的静态文件，再新建一个develop(名字自定)分支，用于托管后台文件，方便以后换电脑时后台文件不会丢失。<br>到GitHub的用户名.github.io仓库下，复制里面的HTTPS地址。<br>在myBlog目录下，右键Git Bash Here: 键入git clone -b develop &lt;刚复制HTTPS地址&gt;</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd /d/ </div><div class=\"line\">$ mkdir myBlog</div><div class=\"line\">$ cd myBlog</div><div class=\"line\">$ git clone -b develop https://github.com/mingdaa/mingdaa.github.io.git</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>安装Hexo</strong><br>在Git Bash继续键入命令：  </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mkdir hexo # 再创建一个hexo文件夹，安装hexo</div><div class=\"line\">$ cd hexo</div><div class=\"line\">$ npm install -g hexo</div><div class=\"line\">$ hexo init</div><div class=\"line\">$ hexo g # 或者hexo generate</div><div class=\"line\">$ hexo s # 或者hexo server，可以在http://localhost:4000/查看</div></pre></td></tr></table></figure>\n<p>注意在使用npm安装hexo的时候，如果在Git Bash中出现  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;sh.exe&quot;: npm: command not found</div></pre></td></tr></table></figure>\n<p>那么需要右击Git Bash以管理员身份运行，再次在Git Bash中输入npm install -g hexo即可。</p>\n<p>装好之后你可以用 hexo -v 命令查看hexo的相关信息，我的hexo如下所示：<br><img src=\"http://okxlor1n5.bkt.clouddn.com/hexo-v.png\" alt=\"image\"></p>\n<p>现在已经可以本地预览博客，执行下列命令,然后到浏览器输入localhost:4000查看。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g # 生成</div><div class=\"line\">$ hexo s # 部署到本地，启动服务</div></pre></td></tr></table></figure>\n<h2 id=\"Hexo配置Next主题\"><a href=\"#Hexo配置Next主题\" class=\"headerlink\" title=\"Hexo配置Next主题\"></a>Hexo配置Next主题</h2><p>Next主题官网：<a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"external\">http://theme-next.iissnan.com/</a><br>其他相关主题配置可浏览Hexo官网上的推荐：<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"external\">https://hexo.io/themes/</a></p>\n<ul>\n<li><p><strong>复制主题</strong><br>在hexo根目录打开Git Bash，键入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean # 清除缓存</div><div class=\"line\">$ git clone https://github.com/iissnan/hexo-theme-next themes/next # 下载Next主题</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>启用主题</strong><br>修改Hexo根目录下的_config.yml配置文件中的theme属性，将其设置为next。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">theme: next</div></pre></td></tr></table></figure>\n<p>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 hexo clean 来清除 Hexo 的缓存。  </p>\n<ul>\n<li><strong>预览配置好的主题</strong><br>执行下列命令,然后到浏览器输入localhost:4000查看效果了。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g #生成</div><div class=\"line\">$ hexo s #部署到本地，启动服务</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>配置git仓库路径</strong></li>\n</ul>\n<p>修改Hexo根目录下的_config.yml配置文件，找到并配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: https://git@github.com:mingdaa/mingdaa.github.io.git #仓库路径https地址</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>完成部署</strong><br>最后一步，部署到github上，键入指令：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save</div><div class=\"line\">$ hexo generate</div><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>输入弹出框的用户名与密码(首次使用git会弹出)。<br>OK，博客已经完全搭建起来了，在浏览器输入<a href=\"https://mingdaa.github.io/（你的github配置的地址），就可以愉快的浏览了\" target=\"_blank\" rel=\"external\">https://mingdaa.github.io/（你的github配置的地址），就可以愉快的浏览了</a></p>\n<p>最后，每次写文章输入一下命令就可以了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo n #写文章</div><div class=\"line\">hexo g #生成</div><div class=\"line\">hexo d #部署到github # 可与hexo g合并为 hexo d -g</div></pre></td></tr></table></figure>\n<h2 id=\"日常操作\"><a href=\"#日常操作\" class=\"headerlink\" title=\"日常操作\"></a>日常操作</h2><ul>\n<li><strong>写文章</strong><br>执行new命令，生成指定名称的文章至 \\hexo\\source\\_posts\\文章标题.md 。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new [layout] &quot;文章标题&quot; # 新建文章</div></pre></td></tr></table></figure>\n<p>然后用编辑器打开“文章标题.md”按照Markdown语法书写文章。<br>其中layout是可选参数，默认值为post。到 source 目录下查看现有的layout。当然你可以添加自己的layout，<br>同时你也可以编辑现有的layout。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">title: 文章标题 </div><div class=\"line\">date: 2017-01-19 16:13:10   # 日期时间</div><div class=\"line\">categories: 分类</div><div class=\"line\">tags: 标签 </div><div class=\"line\">---</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>提交</strong><br>每次在本地对博客进行修改后，先执行下列命令提交网站相关的文件。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add .</div><div class=\"line\">$ git commit -m &quot;...&quot;</div><div class=\"line\">$ git push origin develop</div></pre></td></tr></table></figure>\n<p>然后才执行hexo generate -d发布网站到master分支上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate -d</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>本地仓库丢失</strong><br>当你想在其他电脑工作，或电脑重装系统后，安装Git与Node.js后，可以使用下列步骤：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 拷贝仓库到本地</div><div class=\"line\">$ git clone -b develop https://github.com/mingdaa/mingdaa.github.io.git</div><div class=\"line\"></div><div class=\"line\"># 配置Hexo</div><div class=\"line\">$ npm install -g hexo-cli</div><div class=\"line\">$ npm install hexo</div><div class=\"line\">$ npm install</div><div class=\"line\">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>Hexo常用的几个命令</strong>  </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new &quot;postName&quot; # 新建文章</div><div class=\"line\">hexo new page &quot;pageName&quot; # 新建页面</div><div class=\"line\">hexo generate # 生成静态页面至public目录</div><div class=\"line\">hexo server # 开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</div><div class=\"line\">hexo deploy # 将.deploy目录部署到GitHub</div><div class=\"line\">hexo help  # 查看帮助</div><div class=\"line\">hexo version  # 查看Hexo的版本</div><div class=\"line\">hexo deploy -g  # 生成加部署</div><div class=\"line\">hexo server -g  # 生成加预览</div><div class=\"line\"></div><div class=\"line\">#命令的简写</div><div class=\"line\">hexo n == hexo new</div><div class=\"line\">hexo g == hexo generate</div><div class=\"line\">hexo s == hexo server</div><div class=\"line\">hexo d == hexo deploy</div></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"Hexo-Github搭建个人静态博客\"><a href=\"#Hexo-Github搭建个人静态博客\" class=\"headerlink\" title=\"Hexo + Github搭建个人静态博客\"></a>Hexo + Github搭建个人静态博客</h1><ul>\n<li>hexo出自台湾大学生tommy351之手，是一个基于Node.js的静态博客程序，其编译上百篇文字只需要几秒。hexo生成的静态网页可以直接放到GitHub Pages，BAE，SAE等平台上。</li>\n<li>搭建过程你或许觉得有那么点小繁琐，但一旦搭建完成，写文章是极简单，极舒服的。</li>\n<li>只需要几个简单命令，你就可以完成一切。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo n #写文章</div><div class=\"line\">hexo g #生成</div><div class=\"line\">hexo d #部署到github # 可与hexo g合并为 hexo d -g</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><ul>\n<li><p><strong>安装Node</strong><br>官网<a href=\"https://nodejs.org/en/\">Node.js</a>下载相应平台的最新版本，一路安装即可。<br>可参考<a href=\"http://www.runoob.com/nodejs/nodejs-install-setup.html\">Node.js 安装配置</a>  </p>\n</li>\n<li><p><strong>安装Git</strong><br>下载地址：<a href=\"http://git-scm.com/download/\">http://git-scm.com/download/</a><br>下载下来设置一下环境变量即可，Git_HOME，%Git_HOME%\\bin之类的。  </p>\n</li>\n</ul>\n<h2 id=\"GitHub配置\"><a href=\"#GitHub配置\" class=\"headerlink\" title=\"GitHub配置\"></a>GitHub配置</h2><p>Github官网：<a href=\"http://www.github.com/\">http://www.github.com/</a>    </p>\n<ul>\n<li><p><strong>创建GitHub仓库</strong><br>注册GitHub账号，创建一个以”用户名.github.io”命名的仓库，如我的用户名为mingdaa,那我的仓库名为：mingdaa.github.io。</p>\n</li>\n<li><p><strong>配置Git</strong><br>设置Git的用户名和邮件地址（邮箱就是你注册Github时候的邮箱），打开Git Bash,键入：  </p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name &quot;username&quot; # username填写Git的用户名</div><div class=\"line\">$ git config --global user.email &quot;email@example.com&quot; # email@example.com填写注册Github的邮箱</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>本地Git与GitHub建立联系</strong><br>配置SSH，先检查电脑是否已经有SSH  </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ls -al ~/.ssh</div></pre></td></tr></table></figure>\n<p>如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件。<br>输入以下指令后，一路回车就好：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen -t rsa -C &quot;emailt@example.com&quot;</div></pre></td></tr></table></figure>\n<p>然后键入以下指令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-agent -s</div><div class=\"line\">$ ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure>\n<p>如果出现这个错误:Could not open a connection to your authentication agent，则先执行如下命令即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-agent bash</div></pre></td></tr></table></figure>\n<p>再重新输入指令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure>\n<p>到了这一步，就可以添加SSH key到你的Github账户了。键入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ clip &lt; ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure>\n<p>在github右上角点击头像–&gt;Settings–&gt;SSH and GPG keys–&gt;New SSH key<br>Title自己随便取，然后这个Key就是刚刚拷贝的，你直接粘贴就好（也可以文本打开id_rsa.pub复制其内容），最后Add SSH key。<br>最后测试一下吧，键入命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh -T git@github.com</div></pre></td></tr></table></figure>\n<p>设置成功应该是会显示成功提示，如下：<br><img src=\"http://okxlor1n5.bkt.clouddn.com/ssh-T.png\" alt=\"image\"></p>\n<h2 id=\"Hexo-配置\"><a href=\"#Hexo-配置\" class=\"headerlink\" title=\"Hexo 配置\"></a>Hexo 配置</h2><ul>\n<li><strong>初始化hexo文件夹</strong><br>先在本地自定义一个文件夹存放Hexo相关的文件，我例如我在D盘创建了一个文件夹myBlog。<br>github仓库默有master分支，用于托管生成的静态文件，再新建一个develop(名字自定)分支，用于托管后台文件，方便以后换电脑时后台文件不会丢失。<br>到GitHub的用户名.github.io仓库下，复制里面的HTTPS地址。<br>在myBlog目录下，右键Git Bash Here: 键入git clone -b develop &lt;刚复制HTTPS地址&gt;</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd /d/ </div><div class=\"line\">$ mkdir myBlog</div><div class=\"line\">$ cd myBlog</div><div class=\"line\">$ git clone -b develop https://github.com/mingdaa/mingdaa.github.io.git</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>安装Hexo</strong><br>在Git Bash继续键入命令：  </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mkdir hexo # 再创建一个hexo文件夹，安装hexo</div><div class=\"line\">$ cd hexo</div><div class=\"line\">$ npm install -g hexo</div><div class=\"line\">$ hexo init</div><div class=\"line\">$ hexo g # 或者hexo generate</div><div class=\"line\">$ hexo s # 或者hexo server，可以在http://localhost:4000/查看</div></pre></td></tr></table></figure>\n<p>注意在使用npm安装hexo的时候，如果在Git Bash中出现  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;sh.exe&quot;: npm: command not found</div></pre></td></tr></table></figure>\n<p>那么需要右击Git Bash以管理员身份运行，再次在Git Bash中输入npm install -g hexo即可。</p>\n<p>装好之后你可以用 hexo -v 命令查看hexo的相关信息，我的hexo如下所示：<br><img src=\"http://okxlor1n5.bkt.clouddn.com/hexo-v.png\" alt=\"image\"></p>\n<p>现在已经可以本地预览博客，执行下列命令,然后到浏览器输入localhost:4000查看。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g # 生成</div><div class=\"line\">$ hexo s # 部署到本地，启动服务</div></pre></td></tr></table></figure>\n<h2 id=\"Hexo配置Next主题\"><a href=\"#Hexo配置Next主题\" class=\"headerlink\" title=\"Hexo配置Next主题\"></a>Hexo配置Next主题</h2><p>Next主题官网：<a href=\"http://theme-next.iissnan.com/\">http://theme-next.iissnan.com/</a><br>其他相关主题配置可浏览Hexo官网上的推荐：<a href=\"https://hexo.io/themes/\">https://hexo.io/themes/</a></p>\n<ul>\n<li><p><strong>复制主题</strong><br>在hexo根目录打开Git Bash，键入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean # 清除缓存</div><div class=\"line\">$ git clone https://github.com/iissnan/hexo-theme-next themes/next # 下载Next主题</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>启用主题</strong><br>修改Hexo根目录下的_config.yml配置文件中的theme属性，将其设置为next。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">theme: next</div></pre></td></tr></table></figure>\n<p>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 hexo clean 来清除 Hexo 的缓存。  </p>\n<ul>\n<li><strong>预览配置好的主题</strong><br>执行下列命令,然后到浏览器输入localhost:4000查看效果了。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g #生成</div><div class=\"line\">$ hexo s #部署到本地，启动服务</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>配置git仓库路径</strong></li>\n</ul>\n<p>修改Hexo根目录下的_config.yml配置文件，找到并配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: https://git@github.com:mingdaa/mingdaa.github.io.git #仓库路径https地址</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>完成部署</strong><br>最后一步，部署到github上，键入指令：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save</div><div class=\"line\">$ hexo generate</div><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>输入弹出框的用户名与密码(首次使用git会弹出)。<br>OK，博客已经完全搭建起来了，在浏览器输入<a href=\"https://mingdaa.github.io/（你的github配置的地址），就可以愉快的浏览了\">https://mingdaa.github.io/（你的github配置的地址），就可以愉快的浏览了</a></p>\n<p>最后，每次写文章输入一下命令就可以了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo n #写文章</div><div class=\"line\">hexo g #生成</div><div class=\"line\">hexo d #部署到github # 可与hexo g合并为 hexo d -g</div></pre></td></tr></table></figure>\n<h2 id=\"日常操作\"><a href=\"#日常操作\" class=\"headerlink\" title=\"日常操作\"></a>日常操作</h2><ul>\n<li><strong>写文章</strong><br>执行new命令，生成指定名称的文章至 \\hexo\\source\\_posts\\文章标题.md 。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new [layout] &quot;文章标题&quot; # 新建文章</div></pre></td></tr></table></figure>\n<p>然后用编辑器打开“文章标题.md”按照Markdown语法书写文章。<br>其中layout是可选参数，默认值为post。到 source 目录下查看现有的layout。当然你可以添加自己的layout，<br>同时你也可以编辑现有的layout。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">title: 文章标题 </div><div class=\"line\">date: 2017-01-19 16:13:10   # 日期时间</div><div class=\"line\">categories: 分类</div><div class=\"line\">tags: 标签 </div><div class=\"line\">---</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>提交</strong><br>每次在本地对博客进行修改后，先执行下列命令提交网站相关的文件。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add .</div><div class=\"line\">$ git commit -m &quot;...&quot;</div><div class=\"line\">$ git push origin develop</div></pre></td></tr></table></figure>\n<p>然后才执行hexo generate -d发布网站到master分支上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate -d</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>本地仓库丢失</strong><br>当你想在其他电脑工作，或电脑重装系统后，安装Git与Node.js后，可以使用下列步骤：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 拷贝仓库到本地</div><div class=\"line\">$ git clone -b develop https://github.com/mingdaa/mingdaa.github.io.git</div><div class=\"line\"></div><div class=\"line\"># 配置Hexo</div><div class=\"line\">$ npm install -g hexo-cli</div><div class=\"line\">$ npm install hexo</div><div class=\"line\">$ npm install</div><div class=\"line\">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>Hexo常用的几个命令</strong>  </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new &quot;postName&quot; # 新建文章</div><div class=\"line\">hexo new page &quot;pageName&quot; # 新建页面</div><div class=\"line\">hexo generate # 生成静态页面至public目录</div><div class=\"line\">hexo server # 开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</div><div class=\"line\">hexo deploy # 将.deploy目录部署到GitHub</div><div class=\"line\">hexo help  # 查看帮助</div><div class=\"line\">hexo version  # 查看Hexo的版本</div><div class=\"line\">hexo deploy -g  # 生成加部署</div><div class=\"line\">hexo server -g  # 生成加预览</div><div class=\"line\"></div><div class=\"line\">#命令的简写</div><div class=\"line\">hexo n == hexo new</div><div class=\"line\">hexo g == hexo generate</div><div class=\"line\">hexo s == hexo server</div><div class=\"line\">hexo d == hexo deploy</div></pre></td></tr></table></figure>"},{"title":"markdown简明语法","date":"2017-01-18T02:50:03.000Z","_content":"# markdown简明语法\nMarkdown是一种极简的『标记语言』，将文本转为HTML，通常为我大码农所用。其不追求大而全，简洁至上，正所谓不求最贵，只求最好！\n\n本文介绍Markdown基本语法，内容很少，一行语法一行示例，学会后可轻松写出高大上的文档，再也不需要各种编辑器去调文章格式。另外，网上有各平台下的Markdown工具可用，也有在线的，我直接使用sublime搞定，Markdown本来就是为了追求简洁，弄个工具岂不多此一举。  \n## 强调\n星号与下划线都可以，单是斜体，双是粗体，符号可跨行，符号可加空格  \n格式：  \n<pre>  \n**一个人来到田纳西**  \n__毫无疑问__  \n*我做的馅饼  \n是全天下*  \n_最好吃的_ \n</pre>\n\n显示效果：  \n**一个人来到田纳西**  \n__毫无疑问__  \n*我做的馅饼  \n是全天下*  \n_最好吃的_\n\n---  \n\n## 分割线  \n三个或更多\\-\\_\\*，必须单独一行，可含空格  \n格式：  \n<pre>  \n&#175;&#175;&#175;\n</pre>\n\n显示效果：  \n  \n---\n\n## 空格,换行\n半方大的空格&amp;ensp;或&amp;#8194 ;  \n全方大的空格&amp;emsp ;或&amp;#8195 ;  \n不断行的空格&amp;nbsp ;或&amp;#160 ;  \n2个空格，&amp;emsp;   \n换行，连续按2个以上空格，然后回车\n\n---\n\n## 引用 \n格式：  \n<pre>\n> 引用 \n</pre>\n\n显示效果：  \n> 引用 \n\n内层符号前的空格必须要  \n格式：  \n<pre> \n>引用  \n&emsp;>>引用中的引用 \n</pre>\n\n\n显示效果：   \n >引用\n >>引用中的引用  \n\n---\n \n##  标题\n格式：  \n<pre> \n# 一级标题  \n## 二级标题  \n### 三级标题  \n#### 四级标题  \n##### 五级标题  \n###### 六级标题   \n</pre>\n\n---\n\n## 无序列表\n符号之后的空格不能少，\\-\\+\\*效果一样，但不能混合使用，因混合是嵌套列表，内容可超长  \n格式：   \n<pre>\n- 无序列表  \n+ 无序列表  \n* 无序列表  \n- 无序列表：我很长。我也很长！那比一比啊？比就比！我有这么长，你有我长吗？我有这么这么长！好吧，你赢了！ \n</pre>\n\n显示效果：   \n- 无序列表\n+ 无序列表\n* 无序列表\n- 无序列表：我很长。我也很长！那比一比啊？比就比！我有这么长，你有我长吗？我有这么这么长！好吧，你赢了！  \n\n---\n\n## 有序列表\n\n数字不能省略但可无序，点号之后的空格不能少  \n1. 有序列表\n2. 有序列表\n3. 有序列表\n4. 有序列表 \n\n--- \n\n## 嵌套列表\n\\-\\+\\*可循环使用，但符号之后的空格不能少，符号之前的空格也不能少   \n格式：    \n<pre>\n- 嵌套列表  \n&emsp;+ 嵌套列表  \n&emsp;+ 嵌套列表  \n&emsp;&emsp;- 嵌套列表  \n&emsp;&emsp;&emsp;* 嵌套列表  \n- 嵌套列表  \n</pre>\n\n显示效果：   \n- 嵌套列表\n  + 嵌套列表\n  + 嵌套列表\n    - 嵌套列表\n      * 嵌套列表\n- 嵌套列表  \n\n---\n\n## 文字超链：Inline方式\n格式：  \n<pre>  \n[博客](https://mingdaa.github.io/)  \n</pre>\n\n显示效果：    \n[博客](https://mingdaa.github.io/ \"mingdaa的博客\")\n\n\n## 图片超链\n格式：  \n<pre>\n![image](http://图片地址)\n</pre>\n\n显示效果：   \n![image](https://avatars0.githubusercontent.com/u/19933368?v=3&u=28da34f8cb1f2fea2eecfba93ed15a5909abaf02&s=400)  \n\n--- \n\n## 索引超链：Reference方式\n索引，1 2可以是任意字符    \n格式：  \n<pre>\n[我的博客][1]  \n![图片][2]  \n\n[1]:https://mingdaa.github.io/  \n[2]:https://图片地址 \n</pre>\n\n\n显示效果：   \n[我的博客][1]  \n![图片][2]\n\n[1]:https://mingdaa.github.io/  \n[2]:https://avatars0.githubusercontent.com/u/19933368?v=3&u=28da34f8cb1f2fea2eecfba93ed15a5909abaf02&s=400  \n\n---\n\n## 自动链接\n尖括号    \n格式：  \n<pre>\n&lt;https://mingdaa.github.io&gt;   \n</pre>\n\n显示效果：   \n<https://mingdaa.github.io/>\n\n---\n\n## 代码\n格式：\n<pre>\n&#39;&#39;&#39; \nclass    \n{  \n&emsp;&emsp;public static void main(String[] args)   \n&emsp;&emsp;{  \n&emsp;&emsp;&emsp;&emsp;System.out.println(\"Hello World!\");  \n&emsp;&emsp;}  \n}  \n&#39;&#39;&#39;  \n</pre>\n\n显示效果：  \n```\nclass  \n{\n\tpublic static void main(String[] args) \n\t{\n\t\tSystem.out.println(\"Hello World!\");\n\t}\n}\n```\n\n---\n\n## 注释\n可以使用html的注释，不会在HTML中显示  \n格式：  \n<pre>\n&lt;!-- 注释 --&gt;\n</pre>\n\n## 转义字符\nMarkdown中的转义字符为\\，需要转义的有：  \n\\\\ 反斜杠  \n\\` 反引号  \n\\* 星号  \n\\_ 下划线  \n\\{\\} 大括号  \n\\[\\] 中括号  \n\\(\\) 小括号  \n\\# 井号  \n\\+ 加号  \n\\- 减号  \n\\. 英文句号  \n\\! 感叹号  \n\n\n## 表格\n格式：  \n<pre> \n表头1 | 表头2 <br/>\n---|---  <br/>\n左上 | 右上  <br/>\n左下 | 右下   <br/>\n</pre>\n\n显示效果：\n   \n表头1 | 表头2\n---|---\n左上 | 右上  \n左下 | 右下\n\n---\n\n## HTML 中有用的字符实体\n显示结果|描述|实体名称|实体编号\n---|---|---|----\n&nbsp;|空格|&amp;nbsp;|&amp;#160;\n&#60;|小于号|&amp;lt;|&amp;#60;  \n&gt;|大于号|&amp;gt;|&amp;#62;   \n&amp;|和号|&amp;amp;|&amp;#38;   \n&quot;|引号|&amp;quot;|&amp;#34;   \n'|撇号&nbsp;|&amp;apos; (IE不支持)|&amp;#39;\n￠|分（cent）|&amp;cent;|&amp;#162;    \n&pound;|镑（pound）|&amp;pound;|&amp;#163;  \n&yen;|元（yen）|&amp;yen;|&amp;#165;    \n&euro;|欧元（euro）|&amp;euro;|&amp;#8364;\n§|小节|&amp;sect;|&amp;#167;\n&copy;|版权（copyright）|&amp;copy;|&amp;#169;\n&#174;|注册商标|&amp;reg;|&amp;#174;\n&trade;|商标|&amp;trade;|&amp;#8482;\n×|乘号|&amp;times;|&amp;#215;\n÷|除号|&amp;divide;|&amp;#247;\n\n---\n\n## 其它\n文本中可直接用html标签，但是要前后加上空行。\n","source":"_posts/markdown.md","raw":"---\ntitle: markdown简明语法  \ndate: 2017-01-18 10:50:03  \ntags: markdown  \n---\n# markdown简明语法\nMarkdown是一种极简的『标记语言』，将文本转为HTML，通常为我大码农所用。其不追求大而全，简洁至上，正所谓不求最贵，只求最好！\n\n本文介绍Markdown基本语法，内容很少，一行语法一行示例，学会后可轻松写出高大上的文档，再也不需要各种编辑器去调文章格式。另外，网上有各平台下的Markdown工具可用，也有在线的，我直接使用sublime搞定，Markdown本来就是为了追求简洁，弄个工具岂不多此一举。  \n## 强调\n星号与下划线都可以，单是斜体，双是粗体，符号可跨行，符号可加空格  \n格式：  \n<pre>  \n**一个人来到田纳西**  \n__毫无疑问__  \n*我做的馅饼  \n是全天下*  \n_最好吃的_ \n</pre>\n\n显示效果：  \n**一个人来到田纳西**  \n__毫无疑问__  \n*我做的馅饼  \n是全天下*  \n_最好吃的_\n\n---  \n\n## 分割线  \n三个或更多\\-\\_\\*，必须单独一行，可含空格  \n格式：  \n<pre>  \n&#175;&#175;&#175;\n</pre>\n\n显示效果：  \n  \n---\n\n## 空格,换行\n半方大的空格&amp;ensp;或&amp;#8194 ;  \n全方大的空格&amp;emsp ;或&amp;#8195 ;  \n不断行的空格&amp;nbsp ;或&amp;#160 ;  \n2个空格，&amp;emsp;   \n换行，连续按2个以上空格，然后回车\n\n---\n\n## 引用 \n格式：  \n<pre>\n> 引用 \n</pre>\n\n显示效果：  \n> 引用 \n\n内层符号前的空格必须要  \n格式：  \n<pre> \n>引用  \n&emsp;>>引用中的引用 \n</pre>\n\n\n显示效果：   \n >引用\n >>引用中的引用  \n\n---\n \n##  标题\n格式：  \n<pre> \n# 一级标题  \n## 二级标题  \n### 三级标题  \n#### 四级标题  \n##### 五级标题  \n###### 六级标题   \n</pre>\n\n---\n\n## 无序列表\n符号之后的空格不能少，\\-\\+\\*效果一样，但不能混合使用，因混合是嵌套列表，内容可超长  \n格式：   \n<pre>\n- 无序列表  \n+ 无序列表  \n* 无序列表  \n- 无序列表：我很长。我也很长！那比一比啊？比就比！我有这么长，你有我长吗？我有这么这么长！好吧，你赢了！ \n</pre>\n\n显示效果：   \n- 无序列表\n+ 无序列表\n* 无序列表\n- 无序列表：我很长。我也很长！那比一比啊？比就比！我有这么长，你有我长吗？我有这么这么长！好吧，你赢了！  \n\n---\n\n## 有序列表\n\n数字不能省略但可无序，点号之后的空格不能少  \n1. 有序列表\n2. 有序列表\n3. 有序列表\n4. 有序列表 \n\n--- \n\n## 嵌套列表\n\\-\\+\\*可循环使用，但符号之后的空格不能少，符号之前的空格也不能少   \n格式：    \n<pre>\n- 嵌套列表  \n&emsp;+ 嵌套列表  \n&emsp;+ 嵌套列表  \n&emsp;&emsp;- 嵌套列表  \n&emsp;&emsp;&emsp;* 嵌套列表  \n- 嵌套列表  \n</pre>\n\n显示效果：   \n- 嵌套列表\n  + 嵌套列表\n  + 嵌套列表\n    - 嵌套列表\n      * 嵌套列表\n- 嵌套列表  \n\n---\n\n## 文字超链：Inline方式\n格式：  \n<pre>  \n[博客](https://mingdaa.github.io/)  \n</pre>\n\n显示效果：    \n[博客](https://mingdaa.github.io/ \"mingdaa的博客\")\n\n\n## 图片超链\n格式：  \n<pre>\n![image](http://图片地址)\n</pre>\n\n显示效果：   \n![image](https://avatars0.githubusercontent.com/u/19933368?v=3&u=28da34f8cb1f2fea2eecfba93ed15a5909abaf02&s=400)  \n\n--- \n\n## 索引超链：Reference方式\n索引，1 2可以是任意字符    \n格式：  \n<pre>\n[我的博客][1]  \n![图片][2]  \n\n[1]:https://mingdaa.github.io/  \n[2]:https://图片地址 \n</pre>\n\n\n显示效果：   \n[我的博客][1]  \n![图片][2]\n\n[1]:https://mingdaa.github.io/  \n[2]:https://avatars0.githubusercontent.com/u/19933368?v=3&u=28da34f8cb1f2fea2eecfba93ed15a5909abaf02&s=400  \n\n---\n\n## 自动链接\n尖括号    \n格式：  \n<pre>\n&lt;https://mingdaa.github.io&gt;   \n</pre>\n\n显示效果：   \n<https://mingdaa.github.io/>\n\n---\n\n## 代码\n格式：\n<pre>\n&#39;&#39;&#39; \nclass    \n{  \n&emsp;&emsp;public static void main(String[] args)   \n&emsp;&emsp;{  \n&emsp;&emsp;&emsp;&emsp;System.out.println(\"Hello World!\");  \n&emsp;&emsp;}  \n}  \n&#39;&#39;&#39;  \n</pre>\n\n显示效果：  \n```\nclass  \n{\n\tpublic static void main(String[] args) \n\t{\n\t\tSystem.out.println(\"Hello World!\");\n\t}\n}\n```\n\n---\n\n## 注释\n可以使用html的注释，不会在HTML中显示  \n格式：  \n<pre>\n&lt;!-- 注释 --&gt;\n</pre>\n\n## 转义字符\nMarkdown中的转义字符为\\，需要转义的有：  \n\\\\ 反斜杠  \n\\` 反引号  \n\\* 星号  \n\\_ 下划线  \n\\{\\} 大括号  \n\\[\\] 中括号  \n\\(\\) 小括号  \n\\# 井号  \n\\+ 加号  \n\\- 减号  \n\\. 英文句号  \n\\! 感叹号  \n\n\n## 表格\n格式：  \n<pre> \n表头1 | 表头2 <br/>\n---|---  <br/>\n左上 | 右上  <br/>\n左下 | 右下   <br/>\n</pre>\n\n显示效果：\n   \n表头1 | 表头2\n---|---\n左上 | 右上  \n左下 | 右下\n\n---\n\n## HTML 中有用的字符实体\n显示结果|描述|实体名称|实体编号\n---|---|---|----\n&nbsp;|空格|&amp;nbsp;|&amp;#160;\n&#60;|小于号|&amp;lt;|&amp;#60;  \n&gt;|大于号|&amp;gt;|&amp;#62;   \n&amp;|和号|&amp;amp;|&amp;#38;   \n&quot;|引号|&amp;quot;|&amp;#34;   \n'|撇号&nbsp;|&amp;apos; (IE不支持)|&amp;#39;\n￠|分（cent）|&amp;cent;|&amp;#162;    \n&pound;|镑（pound）|&amp;pound;|&amp;#163;  \n&yen;|元（yen）|&amp;yen;|&amp;#165;    \n&euro;|欧元（euro）|&amp;euro;|&amp;#8364;\n§|小节|&amp;sect;|&amp;#167;\n&copy;|版权（copyright）|&amp;copy;|&amp;#169;\n&#174;|注册商标|&amp;reg;|&amp;#174;\n&trade;|商标|&amp;trade;|&amp;#8482;\n×|乘号|&amp;times;|&amp;#215;\n÷|除号|&amp;divide;|&amp;#247;\n\n---\n\n## 其它\n文本中可直接用html标签，但是要前后加上空行。\n","slug":"markdown","published":1,"updated":"2017-01-19T10:49:29.785Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciytuf1k50002kodduafwabec","content":"<h1 id=\"markdown简明语法\"><a href=\"#markdown简明语法\" class=\"headerlink\" title=\"markdown简明语法\"></a>markdown简明语法</h1><p>Markdown是一种极简的『标记语言』，将文本转为HTML，通常为我大码农所用。其不追求大而全，简洁至上，正所谓不求最贵，只求最好！</p>\n<p>本文介绍Markdown基本语法，内容很少，一行语法一行示例，学会后可轻松写出高大上的文档，再也不需要各种编辑器去调文章格式。另外，网上有各平台下的Markdown工具可用，也有在线的，我直接使用sublime搞定，Markdown本来就是为了追求简洁，弄个工具岂不多此一举。  </p>\n<h2 id=\"强调\"><a href=\"#强调\" class=\"headerlink\" title=\"强调\"></a>强调</h2><p>星号与下划线都可以，单是斜体，双是粗体，符号可跨行，符号可加空格<br>格式：  </p>\n<pre>  \n**一个人来到田纳西**  \n__毫无疑问__  \n*我做的馅饼  \n是全天下*  \n_最好吃的_ \n</pre>\n\n<p>显示效果：<br><strong>一个人来到田纳西</strong><br><strong>毫无疑问</strong><br><em>我做的馅饼<br>是全天下</em><br><em>最好吃的</em></p>\n<hr>\n<h2 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h2><p>三个或更多-_*，必须单独一行，可含空格<br>格式：  </p>\n<pre>  \n&#175;&#175;&#175;\n</pre>\n\n<p>显示效果：  </p>\n<hr>\n<h2 id=\"空格-换行\"><a href=\"#空格-换行\" class=\"headerlink\" title=\"空格,换行\"></a>空格,换行</h2><p>半方大的空格&amp;ensp;或&amp;#8194 ;<br>全方大的空格&amp;emsp ;或&amp;#8195 ;<br>不断行的空格&amp;nbsp ;或&amp;#160 ;<br>2个空格，&amp;emsp;<br>换行，连续按2个以上空格，然后回车</p>\n<hr>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p>格式：  </p>\n<pre>\n> 引用 \n</pre>\n\n<p>显示效果：  </p>\n<blockquote>\n<p>引用 </p>\n</blockquote>\n<p>内层符号前的空格必须要<br>格式：  </p>\n<pre> \n>引用  \n&emsp;>>引用中的引用 \n</pre>\n\n\n<p>显示效果：   </p>\n<blockquote>\n<p>引用</p>\n<blockquote>\n<p>引用中的引用  </p>\n</blockquote>\n</blockquote>\n<hr>\n<h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><p>格式：  </p>\n<pre> \n# 一级标题  \n## 二级标题  \n### 三级标题  \n#### 四级标题  \n##### 五级标题  \n###### 六级标题   \n</pre>\n\n<hr>\n<h2 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h2><p>符号之后的空格不能少，-+*效果一样，但不能混合使用，因混合是嵌套列表，内容可超长<br>格式：   </p>\n<pre>\n- 无序列表  \n+ 无序列表  \n* 无序列表  \n- 无序列表：我很长。我也很长！那比一比啊？比就比！我有这么长，你有我长吗？我有这么这么长！好吧，你赢了！ \n</pre>\n\n<p>显示效果：   </p>\n<ul>\n<li>无序列表</li>\n</ul>\n<ul>\n<li>无序列表</li>\n</ul>\n<ul>\n<li>无序列表</li>\n</ul>\n<ul>\n<li>无序列表：我很长。我也很长！那比一比啊？比就比！我有这么长，你有我长吗？我有这么这么长！好吧，你赢了！  </li>\n</ul>\n<hr>\n<h2 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h2><p>数字不能省略但可无序，点号之后的空格不能少  </p>\n<ol>\n<li>有序列表</li>\n<li>有序列表</li>\n<li>有序列表</li>\n<li>有序列表 </li>\n</ol>\n<hr>\n<h2 id=\"嵌套列表\"><a href=\"#嵌套列表\" class=\"headerlink\" title=\"嵌套列表\"></a>嵌套列表</h2><p>-+*可循环使用，但符号之后的空格不能少，符号之前的空格也不能少<br>格式：    </p>\n<pre>\n- 嵌套列表  \n&emsp;+ 嵌套列表  \n&emsp;+ 嵌套列表  \n&emsp;&emsp;- 嵌套列表  \n&emsp;&emsp;&emsp;* 嵌套列表  \n- 嵌套列表  \n</pre>\n\n<p>显示效果：   </p>\n<ul>\n<li>嵌套列表<ul>\n<li>嵌套列表</li>\n<li>嵌套列表<ul>\n<li>嵌套列表<ul>\n<li>嵌套列表</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>嵌套列表  </li>\n</ul>\n<hr>\n<h2 id=\"文字超链：Inline方式\"><a href=\"#文字超链：Inline方式\" class=\"headerlink\" title=\"文字超链：Inline方式\"></a>文字超链：Inline方式</h2><p>格式：  </p>\n<pre>  \n[博客](https://mingdaa.github.io/)  \n</pre>\n\n<p>显示效果：<br><a href=\"https://mingdaa.github.io/\" title=\"mingdaa的博客\" target=\"_blank\" rel=\"external\">博客</a></p>\n<h2 id=\"图片超链\"><a href=\"#图片超链\" class=\"headerlink\" title=\"图片超链\"></a>图片超链</h2><p>格式：  </p>\n<pre>\n![image](http://图片地址)\n</pre>\n\n<p>显示效果：<br><img src=\"https://avatars0.githubusercontent.com/u/19933368?v=3&amp;u=28da34f8cb1f2fea2eecfba93ed15a5909abaf02&amp;s=400\" alt=\"image\">  </p>\n<hr>\n<h2 id=\"索引超链：Reference方式\"><a href=\"#索引超链：Reference方式\" class=\"headerlink\" title=\"索引超链：Reference方式\"></a>索引超链：Reference方式</h2><p>索引，1 2可以是任意字符<br>格式：  </p>\n<pre>\n[我的博客][1]  \n![图片][2]  \n\n[1]:https://mingdaa.github.io/  \n[2]:https://图片地址 \n</pre>\n\n\n<p>显示效果：<br><a href=\"https://mingdaa.github.io/\" target=\"_blank\" rel=\"external\">我的博客</a><br><img src=\"https://avatars0.githubusercontent.com/u/19933368?v=3&amp;u=28da34f8cb1f2fea2eecfba93ed15a5909abaf02&amp;s=400\" alt=\"图片\"></p>\n<hr>\n<h2 id=\"自动链接\"><a href=\"#自动链接\" class=\"headerlink\" title=\"自动链接\"></a>自动链接</h2><p>尖括号<br>格式：  </p>\n<pre>\n&lt;https://mingdaa.github.io&gt;   \n</pre>\n\n<p>显示效果：<br><a href=\"https://mingdaa.github.io/\" target=\"_blank\" rel=\"external\">https://mingdaa.github.io/</a></p>\n<hr>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>格式：</p>\n<pre>\n&#39;&#39;&#39; \nclass    \n{  \n&emsp;&emsp;public static void main(String[] args)   \n&emsp;&emsp;{  \n&emsp;&emsp;&emsp;&emsp;System.out.println(\"Hello World!\");  \n&emsp;&emsp;}  \n}  \n&#39;&#39;&#39;  \n</pre>\n\n<p>显示效果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">class  </div><div class=\"line\">&#123;</div><div class=\"line\">\tpublic static void main(String[] args) </div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;Hello World!&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>可以使用html的注释，不会在HTML中显示<br>格式：  </p>\n<pre>\n&lt;!-- 注释 --&gt;\n</pre>\n\n<h2 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h2><p>Markdown中的转义字符为\\，需要转义的有：<br>\\ 反斜杠<br>` 反引号<br>* 星号<br>_ 下划线<br>{} 大括号<br>[] 中括号<br>() 小括号<br># 井号<br>+ 加号<br>- 减号<br>. 英文句号<br>! 感叹号  </p>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><p>格式：  </p>\n<pre> \n表头1 | 表头2 <br>\n---|---  <br>\n左上 | 右上  <br>\n左下 | 右下   <br>\n</pre>\n\n<p>显示效果：</p>\n<table>\n<thead>\n<tr>\n<th>表头1</th>\n<th>表头2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>左上</td>\n<td>右上  </td>\n</tr>\n<tr>\n<td>左下</td>\n<td>右下</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"HTML-中有用的字符实体\"><a href=\"#HTML-中有用的字符实体\" class=\"headerlink\" title=\"HTML 中有用的字符实体\"></a>HTML 中有用的字符实体</h2><table>\n<thead>\n<tr>\n<th>显示结果</th>\n<th>描述</th>\n<th>实体名称</th>\n<th>实体编号</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&nbsp;</td>\n<td>空格</td>\n<td>&amp;nbsp;</td>\n<td>&amp;#160;</td>\n</tr>\n<tr>\n<td>&#60;</td>\n<td>小于号</td>\n<td>&amp;lt;</td>\n<td>&amp;#60;  </td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>大于号</td>\n<td>&amp;gt;</td>\n<td>&amp;#62;   </td>\n</tr>\n<tr>\n<td>&amp;</td>\n<td>和号</td>\n<td>&amp;amp;</td>\n<td>&amp;#38;   </td>\n</tr>\n<tr>\n<td>&quot;</td>\n<td>引号</td>\n<td>&amp;quot;</td>\n<td>&amp;#34;   </td>\n</tr>\n<tr>\n<td>‘</td>\n<td>撇号&nbsp;</td>\n<td>&amp;apos; (IE不支持)</td>\n<td>&amp;#39;</td>\n</tr>\n<tr>\n<td>￠</td>\n<td>分（cent）</td>\n<td>&amp;cent;</td>\n<td>&amp;#162;    </td>\n</tr>\n<tr>\n<td>&pound;</td>\n<td>镑（pound）</td>\n<td>&amp;pound;</td>\n<td>&amp;#163;  </td>\n</tr>\n<tr>\n<td>&yen;</td>\n<td>元（yen）</td>\n<td>&amp;yen;</td>\n<td>&amp;#165;    </td>\n</tr>\n<tr>\n<td>&euro;</td>\n<td>欧元（euro）</td>\n<td>&amp;euro;</td>\n<td>&amp;#8364;</td>\n</tr>\n<tr>\n<td>§</td>\n<td>小节</td>\n<td>&amp;sect;</td>\n<td>&amp;#167;</td>\n</tr>\n<tr>\n<td>&copy;</td>\n<td>版权（copyright）</td>\n<td>&amp;copy;</td>\n<td>&amp;#169;</td>\n</tr>\n<tr>\n<td>&#174;</td>\n<td>注册商标</td>\n<td>&amp;reg;</td>\n<td>&amp;#174;</td>\n</tr>\n<tr>\n<td>&trade;</td>\n<td>商标</td>\n<td>&amp;trade;</td>\n<td>&amp;#8482;</td>\n</tr>\n<tr>\n<td>×</td>\n<td>乘号</td>\n<td>&amp;times;</td>\n<td>&amp;#215;</td>\n</tr>\n<tr>\n<td>÷</td>\n<td>除号</td>\n<td>&amp;divide;</td>\n<td>&amp;#247;</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>文本中可直接用html标签，但是要前后加上空行。</p>\n","excerpt":"","more":"<h1 id=\"markdown简明语法\"><a href=\"#markdown简明语法\" class=\"headerlink\" title=\"markdown简明语法\"></a>markdown简明语法</h1><p>Markdown是一种极简的『标记语言』，将文本转为HTML，通常为我大码农所用。其不追求大而全，简洁至上，正所谓不求最贵，只求最好！</p>\n<p>本文介绍Markdown基本语法，内容很少，一行语法一行示例，学会后可轻松写出高大上的文档，再也不需要各种编辑器去调文章格式。另外，网上有各平台下的Markdown工具可用，也有在线的，我直接使用sublime搞定，Markdown本来就是为了追求简洁，弄个工具岂不多此一举。  </p>\n<h2 id=\"强调\"><a href=\"#强调\" class=\"headerlink\" title=\"强调\"></a>强调</h2><p>星号与下划线都可以，单是斜体，双是粗体，符号可跨行，符号可加空格<br>格式：  </p>\n<pre>  \n**一个人来到田纳西**  \n__毫无疑问__  \n*我做的馅饼  \n是全天下*  \n_最好吃的_ \n</pre>\n\n<p>显示效果：<br><strong>一个人来到田纳西</strong><br><strong>毫无疑问</strong><br><em>我做的馅饼<br>是全天下</em><br><em>最好吃的</em></p>\n<hr>\n<h2 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h2><p>三个或更多-_*，必须单独一行，可含空格<br>格式：  </p>\n<pre>  \n&#175;&#175;&#175;\n</pre>\n\n<p>显示效果：  </p>\n<hr>\n<h2 id=\"空格-换行\"><a href=\"#空格-换行\" class=\"headerlink\" title=\"空格,换行\"></a>空格,换行</h2><p>半方大的空格&amp;ensp;或&amp;#8194 ;<br>全方大的空格&amp;emsp ;或&amp;#8195 ;<br>不断行的空格&amp;nbsp ;或&amp;#160 ;<br>2个空格，&amp;emsp;<br>换行，连续按2个以上空格，然后回车</p>\n<hr>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p>格式：  </p>\n<pre>\n> 引用 \n</pre>\n\n<p>显示效果：  </p>\n<blockquote>\n<p>引用 </p>\n</blockquote>\n<p>内层符号前的空格必须要<br>格式：  </p>\n<pre> \n>引用  \n&emsp;>>引用中的引用 \n</pre>\n\n\n<p>显示效果：   </p>\n<blockquote>\n<p>引用</p>\n<blockquote>\n<p>引用中的引用  </p>\n</blockquote>\n</blockquote>\n<hr>\n<h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><p>格式：  </p>\n<pre> \n# 一级标题  \n## 二级标题  \n### 三级标题  \n#### 四级标题  \n##### 五级标题  \n###### 六级标题   \n</pre>\n\n<hr>\n<h2 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h2><p>符号之后的空格不能少，-+*效果一样，但不能混合使用，因混合是嵌套列表，内容可超长<br>格式：   </p>\n<pre>\n- 无序列表  \n+ 无序列表  \n* 无序列表  \n- 无序列表：我很长。我也很长！那比一比啊？比就比！我有这么长，你有我长吗？我有这么这么长！好吧，你赢了！ \n</pre>\n\n<p>显示效果：   </p>\n<ul>\n<li>无序列表</li>\n</ul>\n<ul>\n<li>无序列表</li>\n</ul>\n<ul>\n<li>无序列表</li>\n</ul>\n<ul>\n<li>无序列表：我很长。我也很长！那比一比啊？比就比！我有这么长，你有我长吗？我有这么这么长！好吧，你赢了！  </li>\n</ul>\n<hr>\n<h2 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h2><p>数字不能省略但可无序，点号之后的空格不能少  </p>\n<ol>\n<li>有序列表</li>\n<li>有序列表</li>\n<li>有序列表</li>\n<li>有序列表 </li>\n</ol>\n<hr>\n<h2 id=\"嵌套列表\"><a href=\"#嵌套列表\" class=\"headerlink\" title=\"嵌套列表\"></a>嵌套列表</h2><p>-+*可循环使用，但符号之后的空格不能少，符号之前的空格也不能少<br>格式：    </p>\n<pre>\n- 嵌套列表  \n&emsp;+ 嵌套列表  \n&emsp;+ 嵌套列表  \n&emsp;&emsp;- 嵌套列表  \n&emsp;&emsp;&emsp;* 嵌套列表  \n- 嵌套列表  \n</pre>\n\n<p>显示效果：   </p>\n<ul>\n<li>嵌套列表<ul>\n<li>嵌套列表</li>\n<li>嵌套列表<ul>\n<li>嵌套列表<ul>\n<li>嵌套列表</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>嵌套列表  </li>\n</ul>\n<hr>\n<h2 id=\"文字超链：Inline方式\"><a href=\"#文字超链：Inline方式\" class=\"headerlink\" title=\"文字超链：Inline方式\"></a>文字超链：Inline方式</h2><p>格式：  </p>\n<pre>  \n[博客](https://mingdaa.github.io/)  \n</pre>\n\n<p>显示效果：<br><a href=\"https://mingdaa.github.io/\" title=\"mingdaa的博客\">博客</a></p>\n<h2 id=\"图片超链\"><a href=\"#图片超链\" class=\"headerlink\" title=\"图片超链\"></a>图片超链</h2><p>格式：  </p>\n<pre>\n![image](http://图片地址)\n</pre>\n\n<p>显示效果：<br><img src=\"https://avatars0.githubusercontent.com/u/19933368?v=3&amp;u=28da34f8cb1f2fea2eecfba93ed15a5909abaf02&amp;s=400\" alt=\"image\">  </p>\n<hr>\n<h2 id=\"索引超链：Reference方式\"><a href=\"#索引超链：Reference方式\" class=\"headerlink\" title=\"索引超链：Reference方式\"></a>索引超链：Reference方式</h2><p>索引，1 2可以是任意字符<br>格式：  </p>\n<pre>\n[我的博客][1]  \n![图片][2]  \n\n[1]:https://mingdaa.github.io/  \n[2]:https://图片地址 \n</pre>\n\n\n<p>显示效果：<br><a href=\"https://mingdaa.github.io/\">我的博客</a><br><img src=\"https://avatars0.githubusercontent.com/u/19933368?v=3&amp;u=28da34f8cb1f2fea2eecfba93ed15a5909abaf02&amp;s=400\" alt=\"图片\"></p>\n<hr>\n<h2 id=\"自动链接\"><a href=\"#自动链接\" class=\"headerlink\" title=\"自动链接\"></a>自动链接</h2><p>尖括号<br>格式：  </p>\n<pre>\n&lt;https://mingdaa.github.io&gt;   \n</pre>\n\n<p>显示效果：<br><a href=\"https://mingdaa.github.io/\">https://mingdaa.github.io/</a></p>\n<hr>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>格式：</p>\n<pre>\n&#39;&#39;&#39; \nclass    \n{  \n&emsp;&emsp;public static void main(String[] args)   \n&emsp;&emsp;{  \n&emsp;&emsp;&emsp;&emsp;System.out.println(\"Hello World!\");  \n&emsp;&emsp;}  \n}  \n&#39;&#39;&#39;  \n</pre>\n\n<p>显示效果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">class  </div><div class=\"line\">&#123;</div><div class=\"line\">\tpublic static void main(String[] args) </div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;Hello World!&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>可以使用html的注释，不会在HTML中显示<br>格式：  </p>\n<pre>\n&lt;!-- 注释 --&gt;\n</pre>\n\n<h2 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h2><p>Markdown中的转义字符为\\，需要转义的有：<br>\\ 反斜杠<br>` 反引号<br>* 星号<br>_ 下划线<br>{} 大括号<br>[] 中括号<br>() 小括号<br># 井号<br>+ 加号<br>- 减号<br>. 英文句号<br>! 感叹号  </p>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><p>格式：  </p>\n<pre> \n表头1 | 表头2 <br/>\n---|---  <br/>\n左上 | 右上  <br/>\n左下 | 右下   <br/>\n</pre>\n\n<p>显示效果：</p>\n<table>\n<thead>\n<tr>\n<th>表头1</th>\n<th>表头2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>左上</td>\n<td>右上  </td>\n</tr>\n<tr>\n<td>左下</td>\n<td>右下</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"HTML-中有用的字符实体\"><a href=\"#HTML-中有用的字符实体\" class=\"headerlink\" title=\"HTML 中有用的字符实体\"></a>HTML 中有用的字符实体</h2><table>\n<thead>\n<tr>\n<th>显示结果</th>\n<th>描述</th>\n<th>实体名称</th>\n<th>实体编号</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&nbsp;</td>\n<td>空格</td>\n<td>&amp;nbsp;</td>\n<td>&amp;#160;</td>\n</tr>\n<tr>\n<td>&#60;</td>\n<td>小于号</td>\n<td>&amp;lt;</td>\n<td>&amp;#60;  </td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>大于号</td>\n<td>&amp;gt;</td>\n<td>&amp;#62;   </td>\n</tr>\n<tr>\n<td>&amp;</td>\n<td>和号</td>\n<td>&amp;amp;</td>\n<td>&amp;#38;   </td>\n</tr>\n<tr>\n<td>&quot;</td>\n<td>引号</td>\n<td>&amp;quot;</td>\n<td>&amp;#34;   </td>\n</tr>\n<tr>\n<td>‘</td>\n<td>撇号&nbsp;</td>\n<td>&amp;apos; (IE不支持)</td>\n<td>&amp;#39;</td>\n</tr>\n<tr>\n<td>￠</td>\n<td>分（cent）</td>\n<td>&amp;cent;</td>\n<td>&amp;#162;    </td>\n</tr>\n<tr>\n<td>&pound;</td>\n<td>镑（pound）</td>\n<td>&amp;pound;</td>\n<td>&amp;#163;  </td>\n</tr>\n<tr>\n<td>&yen;</td>\n<td>元（yen）</td>\n<td>&amp;yen;</td>\n<td>&amp;#165;    </td>\n</tr>\n<tr>\n<td>&euro;</td>\n<td>欧元（euro）</td>\n<td>&amp;euro;</td>\n<td>&amp;#8364;</td>\n</tr>\n<tr>\n<td>§</td>\n<td>小节</td>\n<td>&amp;sect;</td>\n<td>&amp;#167;</td>\n</tr>\n<tr>\n<td>&copy;</td>\n<td>版权（copyright）</td>\n<td>&amp;copy;</td>\n<td>&amp;#169;</td>\n</tr>\n<tr>\n<td>&#174;</td>\n<td>注册商标</td>\n<td>&amp;reg;</td>\n<td>&amp;#174;</td>\n</tr>\n<tr>\n<td>&trade;</td>\n<td>商标</td>\n<td>&amp;trade;</td>\n<td>&amp;#8482;</td>\n</tr>\n<tr>\n<td>×</td>\n<td>乘号</td>\n<td>&amp;times;</td>\n<td>&amp;#215;</td>\n</tr>\n<tr>\n<td>÷</td>\n<td>除号</td>\n<td>&amp;divide;</td>\n<td>&amp;#247;</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>文本中可直接用html标签，但是要前后加上空行。</p>\n"},{"title":"greenDao 3.X 的使用简析","date":"2017-01-19T08:13:10.000Z","_content":"**greenDao 3.X 的使用简析**\n- 一个对象关系映射（ORM）的框架，能够提供一个接口通过操作对象的方式去操作关系型数据库，它能够让你操作数据库时更简单、更方便。\n- greenDAO github地址：https://github.com/greenrobot/greenDAO\n\n**GreenDao 优点：**\n\n- 性能高，号称Android最快的关系型数据库\n- 内存占用小\n- 库文件比较小，小于100K\n- 支持数据库加密 greendao支持SQLCipher进行数据库加密\n- 简洁易用的API\n\n\n**GreenDao 3.2使用方式**\n- 第一步：在项目的Build.gradle(project)中添加如下配置\n\n```\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath 'org.greenrobot:greendao-gradle-plugin:3.2.1'\n    }\n}\n```\n- 第二步：在模块中的Build.gradle(app)中添加如下配置\n\n```\napply plugin: 'org.greenrobot.greendao'\n\nandroid{\n    ……\n    greendao{\n        // 数据库版本号\n        schemaVersion 1\n        // 设置DaoMaster，DaoSession，Dao包名\n        daoPackage 'xxx.xxx.xxx.gen'\n        // 设置DaoMaster，DaoSession，Dao目录\n        targetGenDir 'src/main/java'\n        //设置生成单元测试目录\n        // targetGenDirTest\n        //设置自动生成单元测试用例\n        // generateTests\n    }\n    ……\n}\n\ndependencies {\n    compile 'org.greenrobot:greendao:3.2.0'\n}\n```\n- 第四步：写实体类\n\n```\n// 实体注解\n@Entity(\n    // 如果你有超过一个的数据库结构，可以通过这个字段来区分该实体属于哪个结构\n    schema = \"myschema\",\n\n    //  实体活动状体标志位(默认为false) 若设置为true，实体有更新、删除和刷新方法\n    active = true,\n\n    // 在数据库中表的名称，默认为实体的类名 \n    nameInDb = \"NOTE\",\n\n    //  定义索引，可以跨越多个列(默认为实体类成员变量的个数) \n    indexes = {\n            @Index(value = \"name DESC\", unique = true)\n    },\n\n    // DAO是否应该创建数据库表的标志(默认为true)\n    // 如果你有多对一的表，将这个字段设置为false\n    // 或者你已经在GreenDAO之外创建了表，也将其置为false\n    createInDb = false\n)\npublic class Note {\n    @Id //选定一个long/Long类型的字段作为实体的ID，即数据库中的主键。\n    private Long id;\n    @NotNull\n    private long createTime;\n    private String content;\n    private String title;\n    private int weatherPosition;\n    private String localtion;\n\n    @Generated   //hash值会自动生成(hash = 346208569) \n    public Note(Long id, long createTime, String content, String title,\n            int weatherPosition, String localtion) {\n        this.id = id;\n        this.createTime = createTime;\n        this.content = content;\n        this.title = title;\n        this.weatherPosition = weatherPosition;\n        this.localtion = localtion;\n    }\n\n    @Generated\n    public Note() {\n    }\n    \n    //make project后变成会自动生成get/set方法\n```\n> 说明：  \n**实体注解**  \n@Entity 实体注解  \n**基础属性注解**  \n@Id 选定一个long/Long类型的字段作为实体的ID，即数据库中的主键。  \n@Generated  GreenDao运行所产生的构造函数或者方法，被此标注的代码可以变更或者下次运行时清除  \n@Keep 注解的代码段在GreenDao下次运行时保持不变，注解实体类：默认禁止修改此类，注解其他代码段，默认禁止修改注解的代码段。\n@Property 让你自定义字段在数据库中的名称，如果为空，GreenDAO将根据驼峰法将其用”_”分割，并全部转为大写，如userName 变为 USER_NAME。  \n@NotNull 使字段在数据库中成为非空字段，通常都会将基本类型加上NonNull标志。   \n@Transient 使得字段不再持久化。  \n**索引注解**  \n@Index：使用@Index作为一个属性来创建一个索引，通过name设置索引别名，也可以通过unique给索引添加约束  \n@Unique：向数据库列添加了一个唯一的约束    \n**关系注解**   \n@ToOne：定义与另一个实体（一个实体对象）的关系  \n@ToMany：定义与多个实体对象的关系   \n\n- 第五步：封装GreenDao调用方法\n\n```\npublic class GreenDaoManager {\n\n    private static GreenDaoManager mInstance; //单例\n    private DaoMaster mDaoMaster; //以一定的模式管理Dao类的数据库对象\n    private DaoSession mDaoSession; //管理制定模式下的所有可用Dao对象\n    public GreenDaoManager() {\n        if (mInstance == null) {\n            DaoMaster.DevOpenHelper devOpenHelper = new\n                    DaoMaster.DevOpenHelper(App.getContext(), \"myDay-note\", null);\n            mDaoMaster = new DaoMaster(devOpenHelper.getWritableDatabase());\n            mDaoSession = mDaoMaster.newSession();\n        }\n    }\n    public static GreenDaoManager getInstance() {\n        if (mInstance == null) {\n            synchronized (GreenDaoManager.class) {\n                if (mInstance == null) {\n                    mInstance = new GreenDaoManager();\n                }\n            }\n        }\n        return mInstance;\n    }\n    public DaoMaster getMaster() {\n        return mDaoMaster;\n    }\n    public DaoSession getSession() {\n        return mDaoSession;\n    }\n    public DaoSession getNewSession() {\n        mDaoSession = mDaoMaster.newSession();\n        return mDaoSession;\n    }\n}\n```\n\n- 第六步：执行增删改查\n\n```\n// 获取dao实例对象\nNoteDao noteDao = GreenDaoManager.getInstance().getSession().getNoteDao();\n//执行增删改查操作\n// 增\nNote note = new Note(null, creatTime, noteContent, noteTitle, weatherPosition,location);\nnoteDao.insert(note);\n// 删\nnoteDao.deleteByKey(noteId);\n// 改\nnoteDao.update(note);\n// 查\nQueryBuilder<Note> queryBuilder = noteDao.queryBuilder().where(NoteDao.Properties.Id.eq(noteId));\nNote note = queryBuilder.unique();\n\n```\n以上即为GreenDao的基本使用方法","source":"_posts/greenDao.md","raw":"---\ntitle: greenDao 3.X 的使用简析  \ndate: 2017-01-19 16:13:10   \ntags: greenDao \n---\n**greenDao 3.X 的使用简析**\n- 一个对象关系映射（ORM）的框架，能够提供一个接口通过操作对象的方式去操作关系型数据库，它能够让你操作数据库时更简单、更方便。\n- greenDAO github地址：https://github.com/greenrobot/greenDAO\n\n**GreenDao 优点：**\n\n- 性能高，号称Android最快的关系型数据库\n- 内存占用小\n- 库文件比较小，小于100K\n- 支持数据库加密 greendao支持SQLCipher进行数据库加密\n- 简洁易用的API\n\n\n**GreenDao 3.2使用方式**\n- 第一步：在项目的Build.gradle(project)中添加如下配置\n\n```\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath 'org.greenrobot:greendao-gradle-plugin:3.2.1'\n    }\n}\n```\n- 第二步：在模块中的Build.gradle(app)中添加如下配置\n\n```\napply plugin: 'org.greenrobot.greendao'\n\nandroid{\n    ……\n    greendao{\n        // 数据库版本号\n        schemaVersion 1\n        // 设置DaoMaster，DaoSession，Dao包名\n        daoPackage 'xxx.xxx.xxx.gen'\n        // 设置DaoMaster，DaoSession，Dao目录\n        targetGenDir 'src/main/java'\n        //设置生成单元测试目录\n        // targetGenDirTest\n        //设置自动生成单元测试用例\n        // generateTests\n    }\n    ……\n}\n\ndependencies {\n    compile 'org.greenrobot:greendao:3.2.0'\n}\n```\n- 第四步：写实体类\n\n```\n// 实体注解\n@Entity(\n    // 如果你有超过一个的数据库结构，可以通过这个字段来区分该实体属于哪个结构\n    schema = \"myschema\",\n\n    //  实体活动状体标志位(默认为false) 若设置为true，实体有更新、删除和刷新方法\n    active = true,\n\n    // 在数据库中表的名称，默认为实体的类名 \n    nameInDb = \"NOTE\",\n\n    //  定义索引，可以跨越多个列(默认为实体类成员变量的个数) \n    indexes = {\n            @Index(value = \"name DESC\", unique = true)\n    },\n\n    // DAO是否应该创建数据库表的标志(默认为true)\n    // 如果你有多对一的表，将这个字段设置为false\n    // 或者你已经在GreenDAO之外创建了表，也将其置为false\n    createInDb = false\n)\npublic class Note {\n    @Id //选定一个long/Long类型的字段作为实体的ID，即数据库中的主键。\n    private Long id;\n    @NotNull\n    private long createTime;\n    private String content;\n    private String title;\n    private int weatherPosition;\n    private String localtion;\n\n    @Generated   //hash值会自动生成(hash = 346208569) \n    public Note(Long id, long createTime, String content, String title,\n            int weatherPosition, String localtion) {\n        this.id = id;\n        this.createTime = createTime;\n        this.content = content;\n        this.title = title;\n        this.weatherPosition = weatherPosition;\n        this.localtion = localtion;\n    }\n\n    @Generated\n    public Note() {\n    }\n    \n    //make project后变成会自动生成get/set方法\n```\n> 说明：  \n**实体注解**  \n@Entity 实体注解  \n**基础属性注解**  \n@Id 选定一个long/Long类型的字段作为实体的ID，即数据库中的主键。  \n@Generated  GreenDao运行所产生的构造函数或者方法，被此标注的代码可以变更或者下次运行时清除  \n@Keep 注解的代码段在GreenDao下次运行时保持不变，注解实体类：默认禁止修改此类，注解其他代码段，默认禁止修改注解的代码段。\n@Property 让你自定义字段在数据库中的名称，如果为空，GreenDAO将根据驼峰法将其用”_”分割，并全部转为大写，如userName 变为 USER_NAME。  \n@NotNull 使字段在数据库中成为非空字段，通常都会将基本类型加上NonNull标志。   \n@Transient 使得字段不再持久化。  \n**索引注解**  \n@Index：使用@Index作为一个属性来创建一个索引，通过name设置索引别名，也可以通过unique给索引添加约束  \n@Unique：向数据库列添加了一个唯一的约束    \n**关系注解**   \n@ToOne：定义与另一个实体（一个实体对象）的关系  \n@ToMany：定义与多个实体对象的关系   \n\n- 第五步：封装GreenDao调用方法\n\n```\npublic class GreenDaoManager {\n\n    private static GreenDaoManager mInstance; //单例\n    private DaoMaster mDaoMaster; //以一定的模式管理Dao类的数据库对象\n    private DaoSession mDaoSession; //管理制定模式下的所有可用Dao对象\n    public GreenDaoManager() {\n        if (mInstance == null) {\n            DaoMaster.DevOpenHelper devOpenHelper = new\n                    DaoMaster.DevOpenHelper(App.getContext(), \"myDay-note\", null);\n            mDaoMaster = new DaoMaster(devOpenHelper.getWritableDatabase());\n            mDaoSession = mDaoMaster.newSession();\n        }\n    }\n    public static GreenDaoManager getInstance() {\n        if (mInstance == null) {\n            synchronized (GreenDaoManager.class) {\n                if (mInstance == null) {\n                    mInstance = new GreenDaoManager();\n                }\n            }\n        }\n        return mInstance;\n    }\n    public DaoMaster getMaster() {\n        return mDaoMaster;\n    }\n    public DaoSession getSession() {\n        return mDaoSession;\n    }\n    public DaoSession getNewSession() {\n        mDaoSession = mDaoMaster.newSession();\n        return mDaoSession;\n    }\n}\n```\n\n- 第六步：执行增删改查\n\n```\n// 获取dao实例对象\nNoteDao noteDao = GreenDaoManager.getInstance().getSession().getNoteDao();\n//执行增删改查操作\n// 增\nNote note = new Note(null, creatTime, noteContent, noteTitle, weatherPosition,location);\nnoteDao.insert(note);\n// 删\nnoteDao.deleteByKey(noteId);\n// 改\nnoteDao.update(note);\n// 查\nQueryBuilder<Note> queryBuilder = noteDao.queryBuilder().where(NoteDao.Properties.Id.eq(noteId));\nNote note = queryBuilder.unique();\n\n```\n以上即为GreenDao的基本使用方法","slug":"greenDao","published":1,"updated":"2017-01-19T08:17:37.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciytuf1k90004kodd4yl1af1k","content":"<p><strong>greenDao 3.X 的使用简析</strong></p>\n<ul>\n<li>一个对象关系映射（ORM）的框架，能够提供一个接口通过操作对象的方式去操作关系型数据库，它能够让你操作数据库时更简单、更方便。</li>\n<li>greenDAO github地址：<a href=\"https://github.com/greenrobot/greenDAO\" target=\"_blank\" rel=\"external\">https://github.com/greenrobot/greenDAO</a></li>\n</ul>\n<p><strong>GreenDao 优点：</strong></p>\n<ul>\n<li>性能高，号称Android最快的关系型数据库</li>\n<li>内存占用小</li>\n<li>库文件比较小，小于100K</li>\n<li>支持数据库加密 greendao支持SQLCipher进行数据库加密</li>\n<li>简洁易用的API</li>\n</ul>\n<p><strong>GreenDao 3.2使用方式</strong></p>\n<ul>\n<li>第一步：在项目的Build.gradle(project)中添加如下配置</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">buildscript &#123;</div><div class=\"line\">    repositories &#123;</div><div class=\"line\">        mavenCentral()</div><div class=\"line\">    &#125;</div><div class=\"line\">    dependencies &#123;</div><div class=\"line\">        classpath &apos;org.greenrobot:greendao-gradle-plugin:3.2.1&apos;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>第二步：在模块中的Build.gradle(app)中添加如下配置</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">apply plugin: &apos;org.greenrobot.greendao&apos;</div><div class=\"line\"></div><div class=\"line\">android&#123;</div><div class=\"line\">    ……</div><div class=\"line\">    greendao&#123;</div><div class=\"line\">        // 数据库版本号</div><div class=\"line\">        schemaVersion 1</div><div class=\"line\">        // 设置DaoMaster，DaoSession，Dao包名</div><div class=\"line\">        daoPackage &apos;xxx.xxx.xxx.gen&apos;</div><div class=\"line\">        // 设置DaoMaster，DaoSession，Dao目录</div><div class=\"line\">        targetGenDir &apos;src/main/java&apos;</div><div class=\"line\">        //设置生成单元测试目录</div><div class=\"line\">        // targetGenDirTest</div><div class=\"line\">        //设置自动生成单元测试用例</div><div class=\"line\">        // generateTests</div><div class=\"line\">    &#125;</div><div class=\"line\">    ……</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">dependencies &#123;</div><div class=\"line\">    compile &apos;org.greenrobot:greendao:3.2.0&apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>第四步：写实体类</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 实体注解</div><div class=\"line\">@Entity(</div><div class=\"line\">    // 如果你有超过一个的数据库结构，可以通过这个字段来区分该实体属于哪个结构</div><div class=\"line\">    schema = &quot;myschema&quot;,</div><div class=\"line\"></div><div class=\"line\">    //  实体活动状体标志位(默认为false) 若设置为true，实体有更新、删除和刷新方法</div><div class=\"line\">    active = true,</div><div class=\"line\"></div><div class=\"line\">    // 在数据库中表的名称，默认为实体的类名 </div><div class=\"line\">    nameInDb = &quot;NOTE&quot;,</div><div class=\"line\"></div><div class=\"line\">    //  定义索引，可以跨越多个列(默认为实体类成员变量的个数) </div><div class=\"line\">    indexes = &#123;</div><div class=\"line\">            @Index(value = &quot;name DESC&quot;, unique = true)</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    // DAO是否应该创建数据库表的标志(默认为true)</div><div class=\"line\">    // 如果你有多对一的表，将这个字段设置为false</div><div class=\"line\">    // 或者你已经在GreenDAO之外创建了表，也将其置为false</div><div class=\"line\">    createInDb = false</div><div class=\"line\">)</div><div class=\"line\">public class Note &#123;</div><div class=\"line\">    @Id //选定一个long/Long类型的字段作为实体的ID，即数据库中的主键。</div><div class=\"line\">    private Long id;</div><div class=\"line\">    @NotNull</div><div class=\"line\">    private long createTime;</div><div class=\"line\">    private String content;</div><div class=\"line\">    private String title;</div><div class=\"line\">    private int weatherPosition;</div><div class=\"line\">    private String localtion;</div><div class=\"line\"></div><div class=\"line\">    @Generated   //hash值会自动生成(hash = 346208569) </div><div class=\"line\">    public Note(Long id, long createTime, String content, String title,</div><div class=\"line\">            int weatherPosition, String localtion) &#123;</div><div class=\"line\">        this.id = id;</div><div class=\"line\">        this.createTime = createTime;</div><div class=\"line\">        this.content = content;</div><div class=\"line\">        this.title = title;</div><div class=\"line\">        this.weatherPosition = weatherPosition;</div><div class=\"line\">        this.localtion = localtion;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Generated</div><div class=\"line\">    public Note() &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    //make project后变成会自动生成get/set方法</div></pre></td></tr></table></figure>\n<blockquote>\n<p>说明：<br><strong>实体注解</strong><br>@Entity 实体注解<br><strong>基础属性注解</strong><br>@Id 选定一个long/Long类型的字段作为实体的ID，即数据库中的主键。<br>@Generated  GreenDao运行所产生的构造函数或者方法，被此标注的代码可以变更或者下次运行时清除<br>@Keep 注解的代码段在GreenDao下次运行时保持不变，注解实体类：默认禁止修改此类，注解其他代码段，默认禁止修改注解的代码段。<br>@Property 让你自定义字段在数据库中的名称，如果为空，GreenDAO将根据驼峰法将其用”_”分割，并全部转为大写，如userName 变为 USER_NAME。<br>@NotNull 使字段在数据库中成为非空字段，通常都会将基本类型加上NonNull标志。<br>@Transient 使得字段不再持久化。<br><strong>索引注解</strong><br>@Index：使用@Index作为一个属性来创建一个索引，通过name设置索引别名，也可以通过unique给索引添加约束<br>@Unique：向数据库列添加了一个唯一的约束<br><strong>关系注解</strong><br>@ToOne：定义与另一个实体（一个实体对象）的关系<br>@ToMany：定义与多个实体对象的关系   </p>\n</blockquote>\n<ul>\n<li>第五步：封装GreenDao调用方法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class GreenDaoManager &#123;</div><div class=\"line\"></div><div class=\"line\">    private static GreenDaoManager mInstance; //单例</div><div class=\"line\">    private DaoMaster mDaoMaster; //以一定的模式管理Dao类的数据库对象</div><div class=\"line\">    private DaoSession mDaoSession; //管理制定模式下的所有可用Dao对象</div><div class=\"line\">    public GreenDaoManager() &#123;</div><div class=\"line\">        if (mInstance == null) &#123;</div><div class=\"line\">            DaoMaster.DevOpenHelper devOpenHelper = new</div><div class=\"line\">                    DaoMaster.DevOpenHelper(App.getContext(), &quot;myDay-note&quot;, null);</div><div class=\"line\">            mDaoMaster = new DaoMaster(devOpenHelper.getWritableDatabase());</div><div class=\"line\">            mDaoSession = mDaoMaster.newSession();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    public static GreenDaoManager getInstance() &#123;</div><div class=\"line\">        if (mInstance == null) &#123;</div><div class=\"line\">            synchronized (GreenDaoManager.class) &#123;</div><div class=\"line\">                if (mInstance == null) &#123;</div><div class=\"line\">                    mInstance = new GreenDaoManager();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return mInstance;</div><div class=\"line\">    &#125;</div><div class=\"line\">    public DaoMaster getMaster() &#123;</div><div class=\"line\">        return mDaoMaster;</div><div class=\"line\">    &#125;</div><div class=\"line\">    public DaoSession getSession() &#123;</div><div class=\"line\">        return mDaoSession;</div><div class=\"line\">    &#125;</div><div class=\"line\">    public DaoSession getNewSession() &#123;</div><div class=\"line\">        mDaoSession = mDaoMaster.newSession();</div><div class=\"line\">        return mDaoSession;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>第六步：执行增删改查</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 获取dao实例对象</div><div class=\"line\">NoteDao noteDao = GreenDaoManager.getInstance().getSession().getNoteDao();</div><div class=\"line\">//执行增删改查操作</div><div class=\"line\">// 增</div><div class=\"line\">Note note = new Note(null, creatTime, noteContent, noteTitle, weatherPosition,location);</div><div class=\"line\">noteDao.insert(note);</div><div class=\"line\">// 删</div><div class=\"line\">noteDao.deleteByKey(noteId);</div><div class=\"line\">// 改</div><div class=\"line\">noteDao.update(note);</div><div class=\"line\">// 查</div><div class=\"line\">QueryBuilder&lt;Note&gt; queryBuilder = noteDao.queryBuilder().where(NoteDao.Properties.Id.eq(noteId));</div><div class=\"line\">Note note = queryBuilder.unique();</div></pre></td></tr></table></figure>\n<p>以上即为GreenDao的基本使用方法</p>\n","excerpt":"","more":"<p><strong>greenDao 3.X 的使用简析</strong></p>\n<ul>\n<li>一个对象关系映射（ORM）的框架，能够提供一个接口通过操作对象的方式去操作关系型数据库，它能够让你操作数据库时更简单、更方便。</li>\n<li>greenDAO github地址：<a href=\"https://github.com/greenrobot/greenDAO\">https://github.com/greenrobot/greenDAO</a></li>\n</ul>\n<p><strong>GreenDao 优点：</strong></p>\n<ul>\n<li>性能高，号称Android最快的关系型数据库</li>\n<li>内存占用小</li>\n<li>库文件比较小，小于100K</li>\n<li>支持数据库加密 greendao支持SQLCipher进行数据库加密</li>\n<li>简洁易用的API</li>\n</ul>\n<p><strong>GreenDao 3.2使用方式</strong></p>\n<ul>\n<li>第一步：在项目的Build.gradle(project)中添加如下配置</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">buildscript &#123;</div><div class=\"line\">    repositories &#123;</div><div class=\"line\">        mavenCentral()</div><div class=\"line\">    &#125;</div><div class=\"line\">    dependencies &#123;</div><div class=\"line\">        classpath &apos;org.greenrobot:greendao-gradle-plugin:3.2.1&apos;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>第二步：在模块中的Build.gradle(app)中添加如下配置</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">apply plugin: &apos;org.greenrobot.greendao&apos;</div><div class=\"line\"></div><div class=\"line\">android&#123;</div><div class=\"line\">    ……</div><div class=\"line\">    greendao&#123;</div><div class=\"line\">        // 数据库版本号</div><div class=\"line\">        schemaVersion 1</div><div class=\"line\">        // 设置DaoMaster，DaoSession，Dao包名</div><div class=\"line\">        daoPackage &apos;xxx.xxx.xxx.gen&apos;</div><div class=\"line\">        // 设置DaoMaster，DaoSession，Dao目录</div><div class=\"line\">        targetGenDir &apos;src/main/java&apos;</div><div class=\"line\">        //设置生成单元测试目录</div><div class=\"line\">        // targetGenDirTest</div><div class=\"line\">        //设置自动生成单元测试用例</div><div class=\"line\">        // generateTests</div><div class=\"line\">    &#125;</div><div class=\"line\">    ……</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">dependencies &#123;</div><div class=\"line\">    compile &apos;org.greenrobot:greendao:3.2.0&apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>第四步：写实体类</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 实体注解</div><div class=\"line\">@Entity(</div><div class=\"line\">    // 如果你有超过一个的数据库结构，可以通过这个字段来区分该实体属于哪个结构</div><div class=\"line\">    schema = &quot;myschema&quot;,</div><div class=\"line\"></div><div class=\"line\">    //  实体活动状体标志位(默认为false) 若设置为true，实体有更新、删除和刷新方法</div><div class=\"line\">    active = true,</div><div class=\"line\"></div><div class=\"line\">    // 在数据库中表的名称，默认为实体的类名 </div><div class=\"line\">    nameInDb = &quot;NOTE&quot;,</div><div class=\"line\"></div><div class=\"line\">    //  定义索引，可以跨越多个列(默认为实体类成员变量的个数) </div><div class=\"line\">    indexes = &#123;</div><div class=\"line\">            @Index(value = &quot;name DESC&quot;, unique = true)</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    // DAO是否应该创建数据库表的标志(默认为true)</div><div class=\"line\">    // 如果你有多对一的表，将这个字段设置为false</div><div class=\"line\">    // 或者你已经在GreenDAO之外创建了表，也将其置为false</div><div class=\"line\">    createInDb = false</div><div class=\"line\">)</div><div class=\"line\">public class Note &#123;</div><div class=\"line\">    @Id //选定一个long/Long类型的字段作为实体的ID，即数据库中的主键。</div><div class=\"line\">    private Long id;</div><div class=\"line\">    @NotNull</div><div class=\"line\">    private long createTime;</div><div class=\"line\">    private String content;</div><div class=\"line\">    private String title;</div><div class=\"line\">    private int weatherPosition;</div><div class=\"line\">    private String localtion;</div><div class=\"line\"></div><div class=\"line\">    @Generated   //hash值会自动生成(hash = 346208569) </div><div class=\"line\">    public Note(Long id, long createTime, String content, String title,</div><div class=\"line\">            int weatherPosition, String localtion) &#123;</div><div class=\"line\">        this.id = id;</div><div class=\"line\">        this.createTime = createTime;</div><div class=\"line\">        this.content = content;</div><div class=\"line\">        this.title = title;</div><div class=\"line\">        this.weatherPosition = weatherPosition;</div><div class=\"line\">        this.localtion = localtion;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Generated</div><div class=\"line\">    public Note() &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    //make project后变成会自动生成get/set方法</div></pre></td></tr></table></figure>\n<blockquote>\n<p>说明：<br><strong>实体注解</strong><br>@Entity 实体注解<br><strong>基础属性注解</strong><br>@Id 选定一个long/Long类型的字段作为实体的ID，即数据库中的主键。<br>@Generated  GreenDao运行所产生的构造函数或者方法，被此标注的代码可以变更或者下次运行时清除<br>@Keep 注解的代码段在GreenDao下次运行时保持不变，注解实体类：默认禁止修改此类，注解其他代码段，默认禁止修改注解的代码段。<br>@Property 让你自定义字段在数据库中的名称，如果为空，GreenDAO将根据驼峰法将其用”_”分割，并全部转为大写，如userName 变为 USER_NAME。<br>@NotNull 使字段在数据库中成为非空字段，通常都会将基本类型加上NonNull标志。<br>@Transient 使得字段不再持久化。<br><strong>索引注解</strong><br>@Index：使用@Index作为一个属性来创建一个索引，通过name设置索引别名，也可以通过unique给索引添加约束<br>@Unique：向数据库列添加了一个唯一的约束<br><strong>关系注解</strong><br>@ToOne：定义与另一个实体（一个实体对象）的关系<br>@ToMany：定义与多个实体对象的关系   </p>\n</blockquote>\n<ul>\n<li>第五步：封装GreenDao调用方法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class GreenDaoManager &#123;</div><div class=\"line\"></div><div class=\"line\">    private static GreenDaoManager mInstance; //单例</div><div class=\"line\">    private DaoMaster mDaoMaster; //以一定的模式管理Dao类的数据库对象</div><div class=\"line\">    private DaoSession mDaoSession; //管理制定模式下的所有可用Dao对象</div><div class=\"line\">    public GreenDaoManager() &#123;</div><div class=\"line\">        if (mInstance == null) &#123;</div><div class=\"line\">            DaoMaster.DevOpenHelper devOpenHelper = new</div><div class=\"line\">                    DaoMaster.DevOpenHelper(App.getContext(), &quot;myDay-note&quot;, null);</div><div class=\"line\">            mDaoMaster = new DaoMaster(devOpenHelper.getWritableDatabase());</div><div class=\"line\">            mDaoSession = mDaoMaster.newSession();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    public static GreenDaoManager getInstance() &#123;</div><div class=\"line\">        if (mInstance == null) &#123;</div><div class=\"line\">            synchronized (GreenDaoManager.class) &#123;</div><div class=\"line\">                if (mInstance == null) &#123;</div><div class=\"line\">                    mInstance = new GreenDaoManager();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return mInstance;</div><div class=\"line\">    &#125;</div><div class=\"line\">    public DaoMaster getMaster() &#123;</div><div class=\"line\">        return mDaoMaster;</div><div class=\"line\">    &#125;</div><div class=\"line\">    public DaoSession getSession() &#123;</div><div class=\"line\">        return mDaoSession;</div><div class=\"line\">    &#125;</div><div class=\"line\">    public DaoSession getNewSession() &#123;</div><div class=\"line\">        mDaoSession = mDaoMaster.newSession();</div><div class=\"line\">        return mDaoSession;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>第六步：执行增删改查</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 获取dao实例对象</div><div class=\"line\">NoteDao noteDao = GreenDaoManager.getInstance().getSession().getNoteDao();</div><div class=\"line\">//执行增删改查操作</div><div class=\"line\">// 增</div><div class=\"line\">Note note = new Note(null, creatTime, noteContent, noteTitle, weatherPosition,location);</div><div class=\"line\">noteDao.insert(note);</div><div class=\"line\">// 删</div><div class=\"line\">noteDao.deleteByKey(noteId);</div><div class=\"line\">// 改</div><div class=\"line\">noteDao.update(note);</div><div class=\"line\">// 查</div><div class=\"line\">QueryBuilder&lt;Note&gt; queryBuilder = noteDao.queryBuilder().where(NoteDao.Properties.Id.eq(noteId));</div><div class=\"line\">Note note = queryBuilder.unique();</div></pre></td></tr></table></figure>\n<p>以上即为GreenDao的基本使用方法</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ciytuf1k10000koddsyvoai6a","tag_id":"ciytuf1k80003koddybhz3lim","_id":"ciytuf1ke0006kodd8jcdtu4c"},{"post_id":"ciytuf1k50002kodduafwabec","tag_id":"ciytuf1kd0005koddvmabkjcy","_id":"ciytuf1kf0008koddjt9gbpyq"},{"post_id":"ciytuf1k90004kodd4yl1af1k","tag_id":"ciytuf1kf0007koddltqbepaw","_id":"ciytuf1kf0009koddexsd4uxn"}],"Tag":[{"name":"Hexo","_id":"ciytuf1k80003koddybhz3lim"},{"name":"markdown","_id":"ciytuf1kd0005koddvmabkjcy"},{"name":"greenDao","_id":"ciytuf1kf0007koddltqbepaw"}]}}